///////////////////////////////////////////////////////////////////////////////
//                                                                             
// JTOpen (IBM Toolbox for Java - OSS version)                              
//                                                                             
// Filename: SpooledFileListItem.java
//                                                                             
// The source code contained herein is licensed under the IBM Public License   
// Version 1.0, which has been approved by the Open Source Initiative.         
// Copyright (C) 1997-2003 International Business Machines Corporation and     
// others. All rights reserved.                                                
//                                                                             
///////////////////////////////////////////////////////////////////////////////

package com.ibm.as400.access.list;

import com.ibm.as400.access.*;
import java.util.*;

/**
 * Contains spooled file information that was generated by {@link com.ibm.as400.access.list.SpooledFileOpenList SpooledFileOpenList}.
**/
public class SpooledFileListItem
{
  private static final String copyright = "Copyright (C) 1997-2003 International Business Machines Corporation and others.";
  
  /**
   * Constant indicating the spooled file is schedule immediate. A spooling writer
   * can process the spooled file immediately.
   * @see #getSchedule
  **/
  public static final String SCHEDULE_IMMEDIATE = "1";

  /**
   * Constant indicating the spooled file is schedule file end. A spooling writer
   * cannot process the spooled file until it has been closed.
   * @see #getSchedule
  **/
  public static final String SCHEDULE_FILE_END = "2";

  /**
   * Constant indicating the spooled file is schedule job end. A spooling writer
   * cannot process the spooled file until the job of the spooled file has ended.
   * @see #getSchedule
  **/
  public static final String SCHEDULE_JOB_END = "3";


  /**
   * Constant indicating the spooled file is available to be written to
   * an output device by a writer.
   * @see #getStatus
  **/
  public static final int STATUS_READY = 1;

  /**
   * Constant indicating the spooled file has not been processed completely
   * and is not ready to be selected by a writer.
   * @see #getStatus
  **/
  public static final int STATUS_OPEN = 2;

  /**
   * Constant indicating the spooled file has been processed completely by a
   * program, but SCHEDULE(*JOBEND) was specified. The job that produced the
   * spooled file has not finished.
   * @see #getStatus
  **/
  public static final int STATUS_CLOSED = 3;

  /**
   * Constant indicating the spooled file has been written and then saved. This
   * spooled file remains saved until it is released.
   * @see #getStatus
  **/
  public static final int STATUS_SAVED = 4;

  /**
   * Constant indicating the spooled file currently is being produced by the writer
   * on an output device.
   * @see #getStatus
  **/
  public static final int STATUS_WRITING = 5;

  /**
   * Constant indicating the spooled file has been held.
   * @see #getStatus
  **/
  public static final int STATUS_HELD = 6;

  /**
   * Constant indicating the spooled file has a message that needs a reply or needs
   * an action to be taken.
   * @see #getStatus
  **/
  public static final int STATUS_MESSAGE_WAIT = 7;

  /**
   * Constant indicating the spooled file is pending (waiting) to be printed.
   * @see #getStatus
  **/
  public static final int STATUS_PENDING = 8;

  /**
   * Constant indicating the spooled file has been sent to the printer completely,
   * but the print complete status has not been sent back.
   * @see #getStatus
  **/
  public static final int STATUS_PRINTING = 9;

  /**
   * Constant indicating the spooled file is no longer in the system. A spooled file
   * with this status is only returned in the list of spooled files if the qualified
   * job name was specified.
   * @see #getStatus
  **/
  public static final int STATUS_FINISHED = 10;

  /**
   * Constant indicating the spooled file is being sent or has been sent to a remote
   * system.
   * @see #getStatus
  **/
  public static final int STATUS_SENDING = 11;

  /**
   * Constant indicating the spooled file has been deferred from printing.
   * @see #getStatus
  **/
  public static final int STATUS_DEFERRED = 12;

  private String jobName_;
  private String jobUser_;
  private String jobNumber_;
  private String spooledFileName_;
  private int spooledFileNumber_;
  private int status_;
  private String dateOpened_;
  private String timeOpened_;
  private String spooledFileSchedule_;
  private String spooledFileSystem_;
  private String userData_;
  private String formType_;
  private String outputQueueName_;
  private String outputQueueLib_;
  private int asp_;
  private int size_;
  private int sizeMult_;
  private int totalPages_;
  private int copiesLeftToPrint_;
  private String priority_;

  SpooledFileListItem(String jobName, String jobUser, String jobNumber,
                      String spooledFileName, int spooledFileNumber, int status,
                      String dateOpened, String timeOpened, String spooledFileSchedule,
                      String spooledFileSystem, String userData, String formType,
                      String outputQueueName, String outputQueueLib, int asp, int size,
                      int sizeMult, int totalPages, int copiesLeftToPrint, String priority)
  {
    jobName_ = jobName;
    jobUser_ = jobUser;
    jobNumber_ = jobNumber;
    spooledFileName_ = spooledFileName;
    spooledFileNumber_ = spooledFileNumber;
    status_ = status;
    dateOpened_ = dateOpened;
    timeOpened_ = timeOpened;
    spooledFileSchedule_ = spooledFileSchedule;
    spooledFileSystem_ = spooledFileSystem;
    userData_ = userData;
    formType_ = formType;
    outputQueueName_ = outputQueueName;
    outputQueueLib_ = outputQueueLib;
    asp_ = asp;
    size_ = size;
    sizeMult_ = sizeMult;
    totalPages_ = totalPages;
    copiesLeftToPrint_ = copiesLeftToPrint;
    priority_ = priority;
  }

  /**
   * Returns the auxiliary storage pool (ASP) in which the spooled file resides.
   * Possible values are:
   * <UL>
   * <LI>1 - *SYSTEM, the system auxiliary storage pool.
   * <LI>2-32 - The number of the user auxiliary storage pool.
   * </UL>
   * @return The auxiliary storage pool.
  **/
  public int getASP()
  {
    return asp_;
  }

  /**
   * Returns the remaining number of copies to be printed. This attribute applies
   * to printer device type spooled files only.
   * @return The number of copies left.
  **/
  public int getCopiesLeftToPrint()
  {
    return copiesLeftToPrint_;
  }

  /**
   * Returns the date and time the spooled file was created.
   * @see #getDateOpened
   * @see #getTimeOpened
   * @return The date and time formatted into a java.util.Date object.
  **/
  public Date getCreationDate()
  {
    Calendar c = Calendar.getInstance();
    c.clear();
    c.set(Integer.parseInt(dateOpened_.substring(0,3)) + 1900,// year
          Integer.parseInt(dateOpened_.substring(3,5))-1,     // month is zero based
          Integer.parseInt(dateOpened_.substring(5,7)),       // day
          Integer.parseInt(timeOpened_.substring(0,2)),       // hour
          Integer.parseInt(timeOpened_.substring(2,4)),      // minute
          Integer.parseInt(timeOpened_.substring(4,6)));    // second
    return c.getTime();
  }

  /**
   * Returns the date the spooled file was created.
   * @see #getCreationDate
   * @return The date in the format CYYMMDD.
  **/
  public String getDateOpened()
  {
    return dateOpened_;
  }
  
  /**
   * Returns the type of forms that should be loaded on the printer before this
   * spooled file is printed.  This attribute applies to printer device type spooled
   * files only.
   * @return The form type.
  **/
  public String getFormType()
  {
    return formType_;
  }

  /**
   * Returns the name of the job that created the spooled file.
   * @return The job name.
   * @see #getJobNumber
   * @see #getJobUser
  **/
  public String getJobName()
  {
    return jobName_;
  }

  /**
   * Returns the number of the job that created the spooled file.
   * @return The job number.
   * @see #getJobName
   * @see #getJobUser
  **/
  public String getJobNumber()
  {
    return jobNumber_;
  }

  /**
   * Returns the user of the job that created the spooled file.
   * @return The user name.
  * @see #getJobName
  * @see #getJobNumber
  **/
  public String getJobUser()
  {
    return jobUser_;
  }

  /**
   * Returns the name of the spooled file.
   * @return The spooled file name.
  **/
  public String getName()
  {
    return spooledFileName_;
  }
  
  /**
   * Returns the number of the spooled file.
   * @return The spooled file number.
  **/
  public int getNumber()
  {
    return spooledFileNumber_;
  }

  /**
   * Returns the name of the system where the job that created the spooled file ran.
   * @return The system name.
  **/
  public String getOriginatingSystem()
  {
    return spooledFileSystem_;
  }

  /**
   * Returns the fully-qualified integrated file system path of the output queue in 
   * which the spooled file is located.
   * @return The output queue.
   * @see #getOutputQueueName
   * @see #getOutputQueueLibrary
  **/
  public String getOutputQueue()
  {
    return QSYSObjectPathName.toPath(outputQueueLib_, outputQueueName_, "OUTQ");
  }

  /**
   * Returns the library of the output queue in which the spooled file is located.
   * @return The library.
   * @see #getOutputQueue
  **/
  public String getOutputQueueLibrary()
  {
    return outputQueueLib_;
  }

  /**
   * Returns the name of the output queue in which the spooled file is located.
   * @return The output queue name.
   * @see #getOutputQueue
  **/
  public String getOutputQueueName()
  {
    return outputQueueName_;
  }

  /**
   * Returns the priority of the spooled file. The priority ranges from 1 (highest)
   * to 9 (lowest).
   * @return The priority.
  **/
  public String getPriority()
  {
    return priority_;
  }
  
  /**
   * Returns the schedule of the spooled file.
   * Possible values are:
   * <UL>
   * <LI>{@link #SCHEDULE_IMMEDIATE SCHEDULE_IMMEDIATE}
   * <LI>{@link #SCHEDULE_FILE_END SCHEDULE_FILE_END}
   * <LI>{@link #SCHEDULE_JOB_END SCHEDULE_JOB_END}
   * </UL>
   * @return The schedule.
  **/
  public String getSchedule()
  {
    if (spooledFileSchedule_.equals(SCHEDULE_IMMEDIATE)) return SCHEDULE_IMMEDIATE;
    if (spooledFileSchedule_.equals(SCHEDULE_FILE_END)) return SCHEDULE_FILE_END;
    if (spooledFileSchedule_.equals(SCHEDULE_JOB_END)) return SCHEDULE_JOB_END;
    return spooledFileSchedule_;
  }

  /**
   * Returns the spooled file size in bytes. The size of the spooled file
   * is the data stream size, plus the spooled file's attributes, plus the
   * overhead storage used to store the spooled file's data stream.
   * @return The size.
  **/
  public long getSize()
  {
    if (sizeMult_ > 0) return (long)size_*(long)sizeMult_;
    return size_;
  }

  /**
   * Returns the status of the spooled file.
   * Possible values are:
   * <UL>
   * <LI>{@link #STATUS_READY STATUS_READY}
   * <LI>{@link #STATUS_OPEN STATUS_OPEN}
   * <LI>{@link #STATUS_CLOSED STATUS_CLOSED}
   * <LI>{@link #STATUS_SAVED STATUS_SAVED}
   * <LI>{@link #STATUS_WRITING STATUS_WRITING}
   * <LI>{@link #STATUS_HELD STATUS_HELD}
   * <LI>{@link #STATUS_MESSAGE_WAIT STATUS_MESSAGE_WAIT}
   * <LI>{@link #STATUS_PENDING STATUS_PENDING}
   * <LI>{@link #STATUS_PRINTING STATUS_PRINTING}
   * <LI>{@link #STATUS_FINISHED STATUS_FINISHED}
   * <LI>{@link #STATUS_SENDING STATUS_SENDING}
   * <LI>{@link #STATUS_DEFERRED STATUS_DEFERRED}
   * </UL>
   * @return The status.
  **/
  public int getStatus()
  {
    return status_;
  }

  /**
   * Returns the time the spooled file was created.
   * @see #getCreationDate
   * @return The time in the format HHMMSS.
  **/
  public String getTimeOpened()
  {
    return timeOpened_;
  }

  /**
   * Returns the total number of pages or number of records for this spooled file.
   * @return The number of pages.
  **/
  public int getTotalPages()
  {
    return totalPages_;
  }

  /**
   * Returns the 10 characters of user-specified data that describe the spooled file.
   * @return The user data.
  **/
  public String getUserData()
  {
    return userData_;
  }
}

