package com.ibm.as400.access;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.Hashtable;
import java.util.Random;

/* Testcase to stress the ClientAccessDataStream */ 

public class AAClientAccessDataStreamStress implements Runnable {
	public static void main(String[] args) {
			Hashtable replyStreams = new Hashtable(); 
			ClientAccessDataStream x = DBDSPool.getDBReplyRequestedDS(); 
			replyStreams.put(x,x); 
			System.out.println("Usage:  AAClientAccessDataStreamStress <threads> <runSeconds>"); 
			System.out.println("Starting.  replyStreams.size() = "+replyStreams.size()); 
			try { 
				int threadCount = Integer.parseInt(args[0]); 
				int seconds = Integer.parseInt(args[1]); 
				System.out.println("Running using "+threadCount+" threads for "+seconds+" seconds");
				
				AAClientAccessDataStreamStress[] runnable = new AAClientAccessDataStreamStress[threadCount]; 
				Thread[] threads = new Thread[threadCount]; 
				long[] operationCount = new long[threadCount]; 
				for (int i = 0; i < threadCount; i++) { 
					runnable[i] = new AAClientAccessDataStreamStress(replyStreams, i); 
					threads[i] = new Thread( runnable[i]); 
				}
				for (int i = 0; i < threadCount; i++) {
					threads[i].start(); 
				}

				long endTime = System.currentTimeMillis() + seconds * 1000; 
				int elapsedSeconds = 0; 
				while (System.currentTimeMillis() < endTime) { 
					Thread.sleep(1000);
					elapsedSeconds++; 
					System.out.print(elapsedSeconds);
					for (int i = 0; i < threadCount; i++) { 
						long count = runnable[i].getOperationCount(); 
						if (count == operationCount[i]) {
							System.out.println("Thread "+i+" has stalled"); 
						} else {
							operationCount[i] = count; 
						}
						System.out.print(" "+count); 
					}
					System.out.println();
					}
				
				System.out.println("Runtime over attempting to close clients");
				for (int i = 0; i < threadCount; i++) { 
					runnable[i].shutdown(); 
				}

				
				for (int i = 0; i < threadCount; i++) { 
					System.out.println("Thread "+i+" did "+runnable[i].getOperationCount()+" operations"); 
				}

				System.out.println("Ending.  replyStreams.size() = "+replyStreams.size()); 
				System.out.println("DBDSPool.dbreplyretruneddsPool size is "+DBDSPool.dbreplyrequesteddsPool_.length); 
				System.out.println("DONE"); 
				
			} catch (Exception e) { 
				e.printStackTrace(); 
			}
			
			
	}

	
	public static byte[][] sampleBytes = {

		/* Corrupted data */ 
		{
		
			(byte)0x00,(byte)0x00,(byte)0x00,(byte)0xA2,(byte)0x00,(byte)0x00,(byte)0xE0,(byte)0x04,  (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x01,   (byte)0x00,(byte)0x14,(byte)0x28,(byte)0x00,(byte)0x81,(byte)0x04,(byte)0x00,(byte)0x00,  (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x1F,(byte)0x80, 
        (byte)0x1F,(byte)0x80,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,  (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x7A,(byte)0x38,(byte)0x04,(byte)0x00,(byte)0x00,   (byte)0x00,(byte)0x01,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,  (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x01,(byte)0x00,(byte)0x00, 
        (byte)0x00,(byte)0x01,(byte)0xF0,(byte)0x00,(byte)0x25,(byte)0x00,(byte)0x00,(byte)0xC5,  (byte)0xD5,(byte)0xE4,(byte)0x5C,(byte)0xC8,(byte)0xC5,(byte)0xE7,(byte)0x40,(byte)0x40,   (byte)0x40,(byte)0x40,(byte)0x40,(byte)0x40,(byte)0x40,(byte)0x40,(byte)0x40,(byte)0x40,  (byte)0x40,(byte)0x40,(byte)0x40,(byte)0x40,(byte)0x40,(byte)0x40,(byte)0xF2,(byte)0xF9, 
        (byte)0xF2,(byte)0xF4,(byte)0xE5,(byte)0xF6,(byte)0xD9,(byte)0xF1,(byte)0xD4,(byte)0xF0,  (byte)0xF0,(byte)0xF0,(byte)0xF1,(byte)0xF4,(byte)0xD9,(byte)0xC3,(byte)0xC8,(byte)0xC1,   (byte)0xE2,(byte)0xE3,(byte)0xD4,(byte)0xC9,(byte)0x40,(byte)0x40,(byte)0x40,(byte)0x40,  (byte)0x40,(byte)0x40,(byte)0x40,(byte)0x40,(byte)0x40,(byte)0x40,(byte)0x40,(byte)0x40, 
        (byte)0x40,(byte)0x40,(byte)0x40,(byte)0x40,(byte)0x40,(byte)0x40,(byte)0x40,(byte)0x40,  (byte)0xD8,(byte)0xE9,(byte)0xC4,(byte)0xC1,(byte)0xE2,(byte)0xD6,(byte)0xC9,(byte)0xD5,   (byte)0xC9,(byte)0xE3,(byte)0xD8,(byte)0xE4,(byte)0xE2,(byte)0xC5,(byte)0xD9,(byte)0x40,  (byte)0x40,(byte)0x40,(byte)0x40,(byte)0x40,(byte)0xF4,(byte)0xF6,(byte)0xF9,(byte)0xF3, 
       (byte)0xF0, (byte)0xF7}, 	
		
       {            (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x20,(byte)0x01,(byte)0x02,(byte)0xE0,(byte)0x04,  (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,   (byte)0x00,(byte)0x0C,(byte)0xF0,(byte)0x01,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,  (byte)0x58,(byte)0x13,(byte)0xD6,(byte)0xC1,(byte)0x7C,(byte)0x8A,(byte)0x91,(byte)0x54,}, 

       {(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x28,(byte)0x00,(byte)0x00,(byte)0xE0,(byte)0x04,  (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x2C,(byte)0xBF,   (byte)0x00,(byte)0x14,(byte)0x28,(byte)0x00,(byte)0x80,(byte)0x04,(byte)0x00,(byte)0x00,  (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x03,(byte)0x1D,(byte)0x02, 
           0x1D,0x02,0x00,0x00,0x00,0x00,0x00,0x00}, 
           
           {      
           (byte)0x00,(byte)0x00,(byte)0x00,(byte)0xB6,(byte)0x00,(byte)0x00,(byte)0xE0,(byte)0x04,  (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x2C,(byte)0xB7,   (byte)0x00,(byte)0x14,(byte)0x28,(byte)0x00,(byte)0x82,(byte)0x04,(byte)0x80,(byte)0x00,  (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x01,(byte)0x18,(byte)0x05, 
           (byte)0x18,(byte)0x05,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,  (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x8E,(byte)0x38,(byte)0x07,(byte)0xE2,(byte)0xD8,   (byte)0xD3,(byte)0xC3,(byte)0xC1,(byte)0x40,(byte)0x40,(byte)0x40,(byte)0x00,(byte)0x00,  (byte)0x00,(byte)0x88,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x20, 
           (byte)0x00,(byte)0x0A,(byte)0xC4,(byte)0xD8,(byte)0x6D,(byte)0xE3,(byte)0xD9,(byte)0xF0,  (byte)0xF0,(byte)0xF0,(byte)0xF0,(byte)0xF1,(byte)0x00,(byte)0x0A,(byte)0xD5,(byte)0xE8,   (byte)0xC2,(byte)0x40,(byte)0x40,(byte)0x40,(byte)0x40,(byte)0x40,(byte)0x40,(byte)0x40,  (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x01,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00, 
           (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,  (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,   (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,  (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00, 
           (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0xD8,(byte)0xE2,  (byte)0xD8,(byte)0xE4,(byte)0xD7,(byte)0xC4,(byte)0xC1,(byte)0xE3,(byte)0x00,(byte)0x00,   (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,  (byte)0x00,(byte)0x01,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00, 
           (byte)0x00,(byte)0x00,(byte)0xF7,(byte)0xF9,(byte)0xF5,(byte)0xF7,(byte)0x40,(byte)0x40,(byte)0x40,(byte)0x40,(byte)0x40,(byte)0x40,(byte)0x40,(byte)0x40,(byte)0x40,(byte)0x40  ,
           (byte)0x40,(byte)0xF0,(byte)0xF0,(byte)0xF0,(byte)0xF0,(byte)0xF0
	},

          
          
          
	{
          (byte)0x00,(byte)0x00,(byte)0x01,(byte)0x89,(byte)0x00,(byte)0x00,(byte)0xE0,(byte)0x04,  (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x2C,(byte)0xB5,   (byte)0x00,(byte)0x14,(byte)0x28,(byte)0x00,(byte)0x8A,(byte)0x84,(byte)0x00,(byte)0x00,  (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x01,(byte)0x18,(byte)0x03, 
          (byte)0x18,(byte)0x03,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,  (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x8E,(byte)0x38,(byte)0x07,(byte)0xE2,(byte)0xD8,   (byte)0xD3,(byte)0xC3,(byte)0xC1,(byte)0x40,(byte)0x40,(byte)0x40,(byte)0x00,(byte)0x00,  (byte)0x00,(byte)0x88,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x14, 
          (byte)0x00,(byte)0x12,(byte)0xE2,(byte)0xE3,(byte)0xD4,(byte)0xE3,(byte)0xF0,(byte)0xF0,  (byte)0xF0,(byte)0xF1,(byte)0x40,(byte)0x40,(byte)0x40,(byte)0x40,(byte)0x40,(byte)0x40,   (byte)0x40,(byte)0x40,(byte)0x40,(byte)0x40,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,  (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00, 
          (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,  (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,   (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,  (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00, 
          (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0xD8,(byte)0xE2,  (byte)0xD8,(byte)0xD7,(byte)0xD9,(byte)0xC5,(byte)0xD7,(byte)0x40,(byte)0x00,(byte)0x00,   (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,  (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00, 
          (byte)0x00,(byte)0x03,(byte)0xF7,(byte)0xF9,(byte)0xF6,(byte)0xF7,(byte)0x40,(byte)0x40,  (byte)0x40,(byte)0x40,(byte)0x40,(byte)0x40,(byte)0x40,(byte)0x40,(byte)0x40,(byte)0x40,   (byte)0x40,(byte)0xF0,(byte)0xF0,(byte)0xF0,(byte)0xF0,(byte)0xF0,(byte)0x00,(byte)0x00,  (byte)0x00,(byte)0x06,(byte)0x38,(byte)0x12,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0xCD, 
          (byte)0x38,(byte)0x13,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,  (byte)0x00,(byte)0x03,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,   (byte)0x00,(byte)0x37,(byte)0x00,(byte)0x30,(byte)0x01,(byte)0xF1,(byte)0x00,(byte)0x00,  (byte)0x00,(byte)0x04,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x09,(byte)0x00,(byte)0x00, 
          (byte)0xF0,(byte)0x00,(byte)0x01,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,  (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,   (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x90,(byte)0x00,(byte)0x00,  (byte)0x00,(byte)0x0D,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00, 
          (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x30,(byte)0x01,(byte)0x89,(byte)0x00,(byte)0x00,  (byte)0x00,(byte)0x1A,(byte)0x00,(byte)0x1A,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x25,   (byte)0xF0,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,  (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00, 
          (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x6D,(byte)0x00,(byte)0x00,  (byte)0x00,(byte)0x0D,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,   (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x30,(byte)0x01,(byte)0xC5,(byte)0x00,(byte)0x00,  (byte)0x00,(byte)0x19,(byte)0x00,(byte)0x19,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x25, 
          (byte)0xF0,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,  (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,   (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x4A,(byte)0x00,(byte)0x00,  (byte)0x00,(byte)0x0D,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00, 
          (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x0D,(byte)0x38,(byte)0x40,  (byte)0x00,(byte)0x00,(byte)0xF0,(byte)0xF0,(byte)0xF0,(byte)0xF0,(byte)0xF1,(byte)0x00,   (byte)0x00,(byte)0x00,(byte)0x0D,(byte)0x38,(byte)0x40,(byte)0x00,(byte)0x00,(byte)0xF0,  (byte)0xF0,(byte)0xF0,(byte)0xF0,(byte)0xF2,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x0D, 
          (byte)0x38,(byte)0x40,(byte)0x00,(byte)0x00,(byte)0xF0,(byte)0xF0,(byte)0xF0,(byte)0xF0 ,(byte)0xF3 },
          
         
         
          {    
         (byte)0x00,(byte)0x00,(byte)0x00,(byte)0xD6,(byte)0x00,(byte)0x00,(byte)0xE0,(byte)0x04,  (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x2C,(byte)0xAE,   (byte)0x00,(byte)0x14,(byte)0x28,(byte)0x00,(byte)0x86,(byte)0x04,(byte)0x80,(byte)0x00,  (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x04,(byte)0x18,(byte)0x0E, 
         (byte)0x18,(byte)0x0E,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,  (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x8E,(byte)0x38,(byte)0x07,(byte)0xE2,(byte)0xD8,   (byte)0xD3,(byte)0xC3,(byte)0xC1,(byte)0x40,(byte)0x40,(byte)0x40,(byte)0x00,(byte)0x00,  (byte)0x00,(byte)0x88,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x1C, 
         (byte)0x00,(byte)0x12,(byte)0xE2,(byte)0xC3,(byte)0xD9,(byte)0xE2,(byte)0xD9,(byte)0xF0,  (byte)0xF0,(byte)0xF0,(byte)0xF4,(byte)0x40,(byte)0x40,(byte)0x40,(byte)0x40,(byte)0x40,   (byte)0x40,(byte)0x40,(byte)0x40,(byte)0x40,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x01,  (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00, 
         (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,  (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,   (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,  (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00, 
         (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0xD8,(byte)0xE2,  (byte)0xD8,(byte)0xC6,(byte)0xC5,(byte)0xE3,(byte)0xC3,(byte)0xC8,(byte)0x00,(byte)0x00,   (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,  (byte)0x00,(byte)0x01,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x04,(byte)0x00,(byte)0x00, 
         (byte)0x00,(byte)0x00,(byte)0xF7,(byte)0xF9,(byte)0xF6,(byte)0xF3,(byte)0x40,(byte)0x40,  (byte)0x40,(byte)0x40,(byte)0x40,(byte)0x40,(byte)0x40,(byte)0x40,(byte)0x40,(byte)0x40,   (byte)0x40,(byte)0xF0,(byte)0xF0,(byte)0xF0,(byte)0xF0,(byte)0xF0,(byte)0x00,(byte)0x00,  (byte)0x00,(byte)0x20,(byte)0x38,(byte)0x0E,(byte)0x00,(byte)0x00,(byte)0x06,(byte)0x61, 
         (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x01,(byte)0x00,(byte)0x01,(byte)0x00,(byte)0x02 ,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x04  ,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x24,(byte)0x4E 
          },
          
        
        
          {
        (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x48,(byte)0x00,(byte)0x00,(byte)0xE0,(byte)0x04,  (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x2C,(byte)0xA3,   (byte)0x00,(byte)0x14,(byte)0x28,(byte)0x00,(byte)0x84,(byte)0x04,(byte)0x00,(byte)0x00,  (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x04,(byte)0x18,(byte)0x0B, 
        (byte)0x18,(byte)0x0B,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,  (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x20,(byte)0x38,(byte)0x0E,(byte)0x00,(byte)0x00,   (byte)0x06,(byte)0x5F,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x01,(byte)0x00,(byte)0x01,  (byte)0x00,(byte)0x02,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00, 
        (byte)0x00,(byte)0x04,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x24,(byte)0x4B
          }
           
       
	}; 
	
	
	
    private Hashtable replyStreams_;
    private Hashtable instanceReplyStreams_ = new Hashtable();
    private int threadId_;
    private long operationCount = 0; 
    private boolean running = true; 
    public AAClientAccessDataStreamStress(Hashtable replyStreams, int threadId) {
    	threadId_ = threadId; 
    	replyStreams_=replyStreams; 
    }
    
    
    synchronized public long getOperationCount() { 
    	return operationCount; 
    }
    synchronized public void shutdown() {
    	running = false; 
    }
	public void run() {
		Random r = new Random(); 
		try {
			while (running) {
					
					int whichOne = r.nextInt(sampleBytes.length); 
				/* Randomly read in the datastream and verify that it is correct */

				InputStream is = new ByteArrayInputStream(sampleBytes[whichOne]); 
				ClientAccessDataStream stream = ClientAccessDataStream
						.construct(is, instanceReplyStreams_, replyStreams_, 
								null, threadId_);
                stream.returnToPool(); 
				operationCount++;
			}
			
			System.out.println("Thread "+threadId_+" is done:  instanceReplyStreams.size() = "+instanceReplyStreams_.size()); 
			System.out.println("Thread "+threadId_+" is done:  replyStreams.size()         = "+replyStreams_.size()); 
			
		} catch (Exception e) {
			System.out.println("Thread "+threadId_+" failed with exception"); 
			e.printStackTrace(); 
		 
		}
	}

}
