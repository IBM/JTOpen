/*
 * IFSPanel.java
 *
 * Created on July 15, 2000, 3:30 PM
 *
 * This is free open source software distributed under the IBM Public License found
 * on the World Wide Web at http://oss.software.ibm.com/developerworks/opensource/license10.html
 * Copyright *C* 2000, Jack J. Woehr, PO Box 51, Golden, CO 80402-0051 USA jax@well.com
 * Copyright *C* 2000, International Business Machines Corporation and others. All Rights Reserved.
 */

package com.SoftWoehr.JTOpenContrib.QCDemo;

/** Panel to hold AS400IFSDirectory. Has extra interior panel to change the display
 * pane.
 * @author jax
 * @version 1.0
 */
public class QCIFSPanel extends javax.swing.JPanel implements com.SoftWoehr.JTOpenContrib.QCDemo.QCServiceClient {

  private QCMgr manager;
  private java.lang.String serverName;
  private com.SoftWoehr.JTOpenContrib.QCDemo.QCServiceRecord serviceRecord;
  private com.ibm.as400.vaccess.ErrorDialogAdapter errorDialogAdapter;

  /** Holds the transient pane since we allow users to switch pane types.
   * The member as400ExplorerPane is an artifact of the IDE.
   * NOT CURRENTLY USED.
   */
  private QCVNodeDisplayer browsingPane;

  /** Creates new form IFSPanel */
  public QCIFSPanel() {
    initComponents ();
    QCExplorerPane ep = new QCExplorerPane();
    aS400ExplorerPane1 = ep; // Chuck the pane the IDE adds to the code.
    browsingPane = ep; // From now on, "browsingPane" is the view.
    jPanel1.removeAll();
    ep.addTo(jPanel1);
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the FormEditor.
   */
  private void initComponents () {//GEN-BEGIN:initComponents
    vIFSDirectory = new com.ibm.as400.vaccess.VIFSDirectory ();
    jPanel1 = new javax.swing.JPanel ();
    aS400ExplorerPane1 = new com.ibm.as400.vaccess.AS400ExplorerPane ();
    jPanel2 = new javax.swing.JPanel ();
    pathButton = new javax.swing.JButton ();
    pathTextField = new javax.swing.JTextField ();
    systemButton = new javax.swing.JButton ();
    systemTextField = new javax.swing.JTextField ();
    jPanel3 = new javax.swing.JPanel ();
    explorerButton = new javax.swing.JButton ();
    detailsButton = new javax.swing.JButton ();
    listButton = new javax.swing.JButton ();
    treeButton = new javax.swing.JButton ();

    setLayout (new java.awt.BorderLayout ());

    jPanel1.setToolTipText ("Offers different views of the Integrated File System.");


      jPanel1.add (aS400ExplorerPane1);


    add (jPanel1, java.awt.BorderLayout.CENTER);

    jPanel2.setLayout (new java.awt.GridLayout (2, 2));

      pathButton.setToolTipText ("Click to set the path to the IFS path you entered.");
      pathButton.setText ("Set IFS Path");
      pathButton.addActionListener (new java.awt.event.ActionListener () {
        public void actionPerformed (java.awt.event.ActionEvent evt) {
          pathButtonActionPerformed (evt);
        }
      }
      );

      jPanel2.add (pathButton);

      pathTextField.setToolTipText ("Enter the IFS path you wish to browse.");
      pathTextField.addActionListener (new java.awt.event.ActionListener () {
        public void actionPerformed (java.awt.event.ActionEvent evt) {
          pathTextFieldActionPerformed (evt);
        }
      }
      );

      jPanel2.add (pathTextField);

      systemButton.setToolTipText ("Click to set the system to the name you entered.");
      systemButton.setText ("Set System");
      systemButton.addActionListener (new java.awt.event.ActionListener () {
        public void actionPerformed (java.awt.event.ActionEvent evt) {
          systemButtonActionPerformed (evt);
        }
      }
      );

      jPanel2.add (systemButton);

      systemTextField.setToolTipText ("Enter the name of the system you wish to browse.");
      systemTextField.addActionListener (new java.awt.event.ActionListener () {
        public void actionPerformed (java.awt.event.ActionEvent evt) {
          systemTextFieldActionPerformed (evt);
        }
      }
      );

      jPanel2.add (systemTextField);


    add (jPanel2, java.awt.BorderLayout.SOUTH);

    jPanel3.setLayout (new java.awt.GridLayout (1, 4));

      explorerButton.setToolTipText ("Set the view to an explorer view.");
      explorerButton.setText ("Explorer");
      explorerButton.addActionListener (new java.awt.event.ActionListener () {
        public void actionPerformed (java.awt.event.ActionEvent evt) {
          explorerButtonActionPerformed (evt);
        }
      }
      );

      jPanel3.add (explorerButton);

      detailsButton.setToolTipText ("Set the view to a details view.");
      detailsButton.setText ("Details");
      detailsButton.addActionListener (new java.awt.event.ActionListener () {
        public void actionPerformed (java.awt.event.ActionEvent evt) {
          detailsButtonActionPerformed (evt);
        }
      }
      );

      jPanel3.add (detailsButton);

      listButton.setToolTipText ("Set the view to a list view.");
      listButton.setText ("List");
      listButton.addActionListener (new java.awt.event.ActionListener () {
        public void actionPerformed (java.awt.event.ActionEvent evt) {
          listButtonActionPerformed (evt);
        }
      }
      );

      jPanel3.add (listButton);

      treeButton.setToolTipText ("Set the view to a tree view.");
      treeButton.setText ("Tree");
      treeButton.addActionListener (new java.awt.event.ActionListener () {
        public void actionPerformed (java.awt.event.ActionEvent evt) {
          treeButtonActionPerformed (evt);
        }
      }
      );

      jPanel3.add (treeButton);


    add (jPanel3, java.awt.BorderLayout.NORTH);

  }//GEN-END:initComponents

  // Pushing the button and hitting ENTER in the corresponding field produces the same result.
  private void pathTextFieldActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pathTextFieldActionPerformed
    // Add your handling code here:
    pathButtonActionPerformed(evt);
  }//GEN-LAST:event_pathTextFieldActionPerformed
  // Pushing the button and hitting ENTER in the corresponding field produces the same result.
  private void systemTextFieldActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_systemTextFieldActionPerformed
    // Add your handling code here:
    systemButtonActionPerformed (evt);
  }//GEN-LAST:event_systemTextFieldActionPerformed
  // Change view style.
  private void treeButtonActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_treeButtonActionPerformed
    // Add your handling code here:
    // Changing the view can take some time.
    java.awt.Cursor currentCursor = getCursor();
    setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
    reinstanceBrowsingPane(new QCTreePane());
    // The wait is over.
    setCursor(currentCursor);
    repaint(1000);
  }//GEN-LAST:event_treeButtonActionPerformed
  // Change view style.
  private void listButtonActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listButtonActionPerformed
    // Add your handling code here:
    // Changing the view can take some time.
    java.awt.Cursor currentCursor = getCursor();
    setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
    reinstanceBrowsingPane(new QCListPane());
    // The wait is over.
    setCursor(currentCursor);
    repaint(1000);
  }//GEN-LAST:event_listButtonActionPerformed
  // Change view style.
  private void detailsButtonActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detailsButtonActionPerformed
    // Add your handling code here:
    // Changing the view can take some time.
    java.awt.Cursor currentCursor = getCursor();
    setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
    reinstanceBrowsingPane(new QCDetailsPane());
    // The wait is over.
    setCursor(currentCursor);
    repaint(1000);
  }//GEN-LAST:event_detailsButtonActionPerformed
  // Change view style.
  private void explorerButtonActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_explorerButtonActionPerformed
    // Add your handling code here:
    // Changing the view can take some time.
    java.awt.Cursor currentCursor = getCursor();
    setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
    reinstanceBrowsingPane(new QCExplorerPane());
    // The wait is over.
    setCursor(currentCursor);
    repaint(1000);
  }//GEN-LAST:event_explorerButtonActionPerformed
  // Pushing the button and hitting ENTER in the corresponding field produces the same result.
  private void systemButtonActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_systemButtonActionPerformed
    // Add your handling code here:
    reinstanceServerFromTextEntry();
  }//GEN-LAST:event_systemButtonActionPerformed
  // Pushing the button and hitting ENTER in the corresponding field produces the same result.
  private void pathButtonActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pathButtonActionPerformed
    // Add your handling code here:

    // Make sure we have a system.
    reinstanceServerFromTextEntry();

    // Loading the directory can take some time!
    java.awt.Cursor currentCursor = getCursor();
    setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));

    // Can't change path of a loaded VIFSDirectory.
    // Might as well each time re-instance the VIFSDirectory
    // since pushing the button requests a reload anyway.
    reinstanceIFSDirectory();

    try
    {
      loadPath();
    }/* End try*/

    catch (Exception e)
    {
      e.printStackTrace(System.err);
    }/* End catch*/

    // setExplorerPaneRoot()
    setBrowserPaneRoot();

    // The wait is over.
    setCursor(currentCursor);

  }//GEN-LAST:event_pathButtonActionPerformed

  private synchronized void reinstanceBrowsingPane(QCVNodeDisplayer vnd) {
    jPanel1.removeAll(); // Discard current display pane.

    browsingPane = vnd; // Instance our variable of record.

    setBrowserPaneRoot(); // Apply the vnode.

    if (null != errorDialogAdapter) { // Add the error listener.
      browsingPane.addErrorListener(errorDialogAdapter);
    }

    browsingPane.addTo(jPanel1); // Add pane to visible display.
  }

  private synchronized void reinstanceServerFromTextEntry() {
    String newName = systemTextField.getText();
    if (null == serverName) {
      serverName = "";
    }
    if (null != newName) {
      if (!newName.equals("")) {
        if (!newName.equals(serverName)) {
          serverName = newName;
          if (null != serviceRecord) {

            try { // let go of the service from manager
              manager.freeService(serviceRecord);
            }
            catch (Exception e) {
              e.printStackTrace();
            }
            serviceRecord = null;
          }
          try {
            serviceRecord = manager.getService("qcmgr:" + serverName + "/FILE", this);
          }
          catch (Exception e) {
            e.printStackTrace();
          }
        }
      }
    }
  }

  private synchronized void reinstanceIFSDirectory () {
    vIFSDirectory = new com.ibm.as400.vaccess.VIFSDirectory();
    if (null != serviceRecord) {
      try {
        vIFSDirectory.setSystem(serviceRecord.as400);
      }
      catch (java.beans.PropertyVetoException e) {
        e.printStackTrace();
      }
    }
    setPath();
    if (null != errorDialogAdapter) {
      vIFSDirectory.addErrorListener(errorDialogAdapter);
    }
  }

  private void setExplorerPaneRoot() {
    if (null != vIFSDirectory) {
      try {
        aS400ExplorerPane1.setRoot(vIFSDirectory);
      }
      catch (java.beans.PropertyVetoException e) {
        e.printStackTrace();
      }
    }
  }
  private void setBrowserPaneRoot() {
    if (null != vIFSDirectory) {
      browsingPane.setRoot(vIFSDirectory);
    }
  }

  private void loadPath() {
    vIFSDirectory.load();
  }

  private void setPath() {
    try {
      vIFSDirectory.setPath(pathTextField.getText());
    }
    catch (java.beans.PropertyVetoException e) {
      e.printStackTrace();
    }
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private com.ibm.as400.vaccess.VIFSDirectory vIFSDirectory;
  private javax.swing.JPanel jPanel1;
  private com.ibm.as400.vaccess.AS400ExplorerPane aS400ExplorerPane1;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JButton pathButton;
  private javax.swing.JTextField pathTextField;
  private javax.swing.JButton systemButton;
  private javax.swing.JTextField systemTextField;
  private javax.swing.JPanel jPanel3;
  private javax.swing.JButton explorerButton;
  private javax.swing.JButton detailsButton;
  private javax.swing.JButton listButton;
  private javax.swing.JButton treeButton;
  // End of variables declaration//GEN-END:variables

  /** Sets the QCMgr object which will handle AS400 instances for this client.
   * @param mgr A QCMgr object.
   */
  public void setManager(QCMgr mgr) {
    manager = mgr;
  }

  /** Connects the ErrorDialogAdapter with any as400.vaccess components present.
   * @param eda An instance of an ErrorDialogAdapter already associated
   * with a suitable Frame.
   */
  public void propagateEDA(com.ibm.as400.vaccess.ErrorDialogAdapter eda) {
    errorDialogAdapter=eda;
    browsingPane.addErrorListener(eda);
    vIFSDirectory.addErrorListener(eda);
  }
  /** Required implementantion of the QCServiceClient interface. Releases the
   * AS400 object provided by the server.
   * @param sr The service record which represents the AS400 to be
   * relinquished.
   */
  public void relinquish(QCServiceRecord sr) {
    serviceRecord = null;
  }
}
