/*
 * QCMgrViewer.java
 *
 * Created on July 22, 2000, 5:52 PM
 *
 * This is free open source software distributed under the IBM Public License found
 * on the World Wide Web at http://oss.software.ibm.com/developerworks/opensource/license10.html
 * Copyright *C* 2000, Jack J. Woehr, PO Box 51, Golden, CO 80402-0051 USA jax@well.com
 * Copyright *C* 2000, International Business Machines Corporation and others. All Rights Reserved.
 */

package com.SoftWoehr.JTOpenContrib.QCDemo;

/**
 *
 * @author  jax
 * @version
 */
public class QCMgrViewer extends javax.swing.JPanel {

  private QCMgr manager;

  /** Creates new form QCMgrViewer */
  public QCMgrViewer() {
    initComponents ();
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the FormEditor.
   */
  private void initComponents () {//GEN-BEGIN:initComponents
    refreshButton = new javax.swing.JButton ();
    connectionViewerTextArea = new javax.swing.JTextArea ();
    connectionViewerLabel = new javax.swing.JLabel ();
    setLayout (new java.awt.BorderLayout ());
    addFocusListener (new java.awt.event.FocusAdapter () {
      public void focusGained (java.awt.event.FocusEvent evt) {
        formFocusGained (evt);
      }
    }
    );

    refreshButton.setToolTipText ("Refreshes view of connection manager service sessions.");
    refreshButton.setText ("Refresh");
    refreshButton.addActionListener (new java.awt.event.ActionListener () {
      public void actionPerformed (java.awt.event.ActionEvent evt) {
        refreshButtonActionPerformed (evt);
      }
    }
    );


    add (refreshButton, java.awt.BorderLayout.SOUTH);

    connectionViewerTextArea.setToolTipText ("Shows the managed connections currently active when you press the Refresh button.");
    connectionViewerTextArea.setEnabled (false);


    add (connectionViewerTextArea, java.awt.BorderLayout.CENTER);

    connectionViewerLabel.setText ("Connection manager service session active in  this notebook.");
    connectionViewerLabel.setToolTipText ("Connections in this notebook are pooled by a simple connection manager.");
    connectionViewerLabel.setHorizontalAlignment (javax.swing.SwingConstants.CENTER);


    add (connectionViewerLabel, java.awt.BorderLayout.NORTH);

  }//GEN-END:initComponents

  private void formFocusGained (java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
    // Add your handling code here:
    refresh();
  }//GEN-LAST:event_formFocusGained

  private void refreshButtonActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
    // Add your handling code here:
    refresh();
  }//GEN-LAST:event_refreshButtonActionPerformed

  private void refresh() {
    if (null != manager) {
      // Set the header for servers.
      connectionViewerTextArea.setText("Server instances currently active:\n\n");
      java.util.StringTokenizer servers = new java.util.StringTokenizer(manager.serversToString(),",");

      // Get the servers.
      while (servers.hasMoreTokens()) {
        connectionViewerTextArea.append(servers.nextToken() + " ");
      }

      // Make some space.
      connectionViewerTextArea.append("\n\n");

      // Set the header for the service connections
      connectionViewerTextArea.append("Service connections currently active:\n\n");

      // Get the service connections.
      java.util.StringTokenizer records = new java.util.StringTokenizer(manager.serviceRecordsToString(),"\n");
      while (records.hasMoreTokens()) {
        java.util.StringTokenizer record = new java.util.StringTokenizer(records.nextToken(), ",");
        if (record.hasMoreTokens()) {
          connectionViewerTextArea.append("Server: " + record.nextToken() + "\n");
        }
        if (record.hasMoreTokens()) {
          connectionViewerTextArea.append("Service: " + record.nextToken() + "\n\n");
        }
      }

      // Done.
      repaint(500);
    }
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton refreshButton;
  private javax.swing.JTextArea connectionViewerTextArea;
  private javax.swing.JLabel connectionViewerLabel;
  // End of variables declaration//GEN-END:variables

  /** Sets the manager for this component to poll for service connections. */
  public void setManager (QCMgr mgr) {
    manager = mgr;
  }
}
