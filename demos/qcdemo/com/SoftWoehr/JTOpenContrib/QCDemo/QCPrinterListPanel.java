/*
 * QCPrinterListPanel.java
 *
 * Created on July 18, 2000, 6:41 PM
 *
 * This is free open source software distributed under the IBM Public License found
 * on the World Wide Web at http://oss.software.ibm.com/developerworks/opensource/license10.html
 * Copyright *C* 2000, Jack J. Woehr, PO Box 51, Golden, CO 80402-0051 USA jax@well.com
 * Copyright *C* 2000, International Business Machines Corporation and others. All Rights Reserved.
 */

package com.SoftWoehr.JTOpenContrib.QCDemo;

/** Panel to list printers in an explorer view.
 * @author jax
 * @version 1.0
 */
public class QCPrinterListPanel extends javax.swing.JPanel implements QCServiceClient {

  private QCMgr manager;
  private java.lang.String serverName;
  private com.SoftWoehr.JTOpenContrib.QCDemo.QCServiceRecord serviceRecord;
  private com.ibm.as400.vaccess.ErrorDialogAdapter errorDialogAdapter;

  /** Creates new form QCPrinterListPanel */
  public QCPrinterListPanel() {
    initComponents ();
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the FormEditor.
   */
  private void initComponents () {//GEN-BEGIN:initComponents
    vPrinters1 = new com.ibm.as400.vaccess.VPrinters ();
    aS400ExplorerPane = new com.ibm.as400.vaccess.AS400ExplorerPane ();
    jPanel1 = new javax.swing.JPanel ();
    filterButton = new javax.swing.JButton ();
    filterTextField = new javax.swing.JTextField ();
    systemLabel = new javax.swing.JLabel ();
    systemTextField = new javax.swing.JTextField ();

    setLayout (new java.awt.BorderLayout ());
    setPreferredSize (new java.awt.Dimension(300, 250));



    add (aS400ExplorerPane, java.awt.BorderLayout.CENTER);

    jPanel1.setLayout (new java.awt.GridLayout (2, 2));
    jPanel1.setToolTipText ("Displays a list of printers.");

      filterButton.setToolTipText ("Gets printer list per your specification.");
      filterButton.setText ("Get Printer List");
      filterButton.addActionListener (new java.awt.event.ActionListener () {
        public void actionPerformed (java.awt.event.ActionEvent evt) {
          filterButtonActionPerformed (evt);
        }
      }
      );

      jPanel1.add (filterButton);

      filterTextField.setToolTipText ("Enter printer name or printer name* or *ALL.");
      filterTextField.setText ("*ALL");
      filterTextField.addActionListener (new java.awt.event.ActionListener () {
        public void actionPerformed (java.awt.event.ActionEvent evt) {
          filterTextFieldActionPerformed (evt);
        }
      }
      );

      jPanel1.add (filterTextField);

      systemLabel.setText ("System");
      systemLabel.setToolTipText ("Enter the system name at right.");
      systemLabel.setHorizontalAlignment (javax.swing.SwingConstants.RIGHT);

      jPanel1.add (systemLabel);

      systemTextField.setToolTipText ("Name of AS/400 to connect with.");

      jPanel1.add (systemTextField);


    add (jPanel1, java.awt.BorderLayout.SOUTH);

  }//GEN-END:initComponents

  // Pressing the button and pressing ENTER do the same.
  private void filterTextFieldActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterTextFieldActionPerformed
    // Add your handling code here:
    filterButtonActionPerformed(evt);
  }//GEN-LAST:event_filterTextFieldActionPerformed

  // Pressing the button and pressing ENTER do the same.
  private void filterButtonActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterButtonActionPerformed
    // Add your handling code here:

    // Loading the printers can take some time!
    java.awt.Cursor currentCursor = jPanel1.getCursor();
    setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));

    // Make sure we have a server.
    reinstanceServerFromTextEntry();

    // Can't change path of a loaded VIFSDirectory.
    // Might as well each time re-instance the VIFSDirectory
    // since pushing the button requests a reload anyway.
    reinstancePrinterList();

    // Set the path from the string gadget.
    try {
      vPrinters1.setPrinterFilter(filterTextField.getText());
    }

    catch (java.beans.PropertyVetoException e) {
      e.printStackTrace();
    }

    // Load the data.
    try
    {
      vPrinters1.load();
    }/* End try*/

    catch (Exception e)
    {
      e.printStackTrace();
    }/* End catch*/

    // Set the pane's root (model) to the current VPrinters object.
    setPaneRoot();

    // The wait is over.
    setCursor(currentCursor);

  }//GEN-LAST:event_filterButtonActionPerformed

  private synchronized void reinstanceServerFromTextEntry() {
    String newName = systemTextField.getText();
    if (null == serverName) {
      serverName = "";
    }
    if (null != newName) {
      if (!newName.equals("")) {
        if (!newName.equals(serverName)) {
          serverName = newName;
          if (null != serviceRecord) {

            try { // let go of the service from manager
              manager.freeService(serviceRecord);
            }
            catch (Exception e) {
              e.printStackTrace();
            }
            serviceRecord = null;
          }
          try {
            serviceRecord = manager.getService("qcmgr:" + serverName + "/PRINT", this);
          }
          catch (Exception e) {
            e.printStackTrace();
          }
        }
      }
    }
  }

  private synchronized void reinstancePrinterList () {
    if (null != serviceRecord) {
      vPrinters1 = new com.ibm.as400.vaccess.VPrinters(serviceRecord.as400);
      if (null != errorDialogAdapter) {
        vPrinters1.addErrorListener(errorDialogAdapter);
      }
    }
  }

  private void setPaneRoot() {
    if (null != vPrinters1) {
      try {
        aS400ExplorerPane.setRoot(vPrinters1);
      }
      catch (java.beans.PropertyVetoException e) {
        e.printStackTrace();
      }
    }
  }

  private void loadPrinters () {
    vPrinters1.load();
  }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private com.ibm.as400.vaccess.VPrinters vPrinters1;
  private com.ibm.as400.vaccess.AS400ExplorerPane aS400ExplorerPane;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JButton filterButton;
  private javax.swing.JTextField filterTextField;
  private javax.swing.JLabel systemLabel;
  private javax.swing.JTextField systemTextField;
  // End of variables declaration//GEN-END:variables

  /** Sets the QCMgr object which will handle AS400 instances for this client.
   * @param mgr A QCMgr object.
   */
  public void setManager(QCMgr mgr) {
    manager = mgr;
  }

  /** Connects the ErrorDialogAdapter with any as400.vaccess components present.
   * @param eda An instance of an ErrorDialogAdapter already associated
   * with a suitable Frame.
   */
  public void propagateEDA(com.ibm.as400.vaccess.ErrorDialogAdapter eda) {
    errorDialogAdapter=eda;
    aS400ExplorerPane.addErrorListener(eda);
    vPrinters1.addErrorListener(eda);
  }
  /** Required implementantion of the QCServiceClient interface. Releases the
   * AS400 object provided by the server.
   * @param sr The service record which represents the AS400 to be
   * relinquished.
   */
  public void relinquish(QCServiceRecord sr) {
    serviceRecord = null;
  }
}
