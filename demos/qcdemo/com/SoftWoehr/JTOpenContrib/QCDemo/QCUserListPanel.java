/*
 * QCUserListPanel.java
 *
 * Created on July 14, 2000, 9:07 PM
 *
 * This is free open source software distributed under the IBM Public License found
 * on the World Wide Web at http://oss.software.ibm.com/developerworks/opensource/license10.html
 * Copyright *C* 2000, Jack J. Woehr, PO Box 51, Golden, CO 80402-0051 USA jax@well.com
 * Copyright *C* 2000, International Business Machines Corporation and others. All Rights Reserved.
 */

package com.SoftWoehr.JTOpenContrib.QCDemo;

/** Panel to hold AS400UserListPane.
 * @author jax
 * @version 1.0
 */
public class QCUserListPanel extends javax.swing.JPanel implements com.SoftWoehr.JTOpenContrib.QCDemo.QCServiceClient {

  private QCMgr manager;
  private java.lang.String serverName;
  private com.SoftWoehr.JTOpenContrib.QCDemo.QCServiceRecord serviceRecord;
  private com.ibm.as400.vaccess.ErrorDialogAdapter errorDialogAdapter;

  /** Creates new form QCUserListPanel */
  public QCUserListPanel() {
    initComponents ();
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the FormEditor.
   */
  private void initComponents () {//GEN-BEGIN:initComponents
    vUserList1 = new com.ibm.as400.vaccess.VUserList ();
    aS400DetailsPane1 = new com.ibm.as400.vaccess.AS400DetailsPane ();
    jPanel1 = new javax.swing.JPanel ();
    systemLabel = new javax.swing.JLabel ();
    systemTextField = new javax.swing.JTextField ();
    listButton = new javax.swing.JButton ();
    userListLabel = new javax.swing.JLabel ();

    setLayout (new java.awt.BorderLayout ());



    add (aS400DetailsPane1, java.awt.BorderLayout.CENTER);

    jPanel1.setLayout (new java.awt.GridLayout (1, 3));

      systemLabel.setText ("System name");
      systemLabel.setHorizontalAlignment (javax.swing.SwingConstants.RIGHT);

      jPanel1.add (systemLabel);

      systemTextField.setToolTipText ("Enter system name for user list.");
      systemTextField.addActionListener (new java.awt.event.ActionListener () {
        public void actionPerformed (java.awt.event.ActionEvent evt) {
          systemTextFieldActionPerformed (evt);
        }
      }
      );

      jPanel1.add (systemTextField);

      listButton.setToolTipText ("Get a list of user on system you selected.");
      listButton.setText ("Get User LIst");
      listButton.addActionListener (new java.awt.event.ActionListener () {
        public void actionPerformed (java.awt.event.ActionEvent evt) {
          listButtonActionPerformed (evt);
        }
      }
      );

      jPanel1.add (listButton);


    add (jPanel1, java.awt.BorderLayout.SOUTH);

    userListLabel.setText ("A list of users on the server.");
    userListLabel.setToolTipText ("Fill in the system name below and press the button to get a list of users.");
    userListLabel.setHorizontalAlignment (javax.swing.SwingConstants.CENTER);


    add (userListLabel, java.awt.BorderLayout.NORTH);

  }//GEN-END:initComponents

  // Hitting ENTER in the textfield is the same as pressing the button.
  private void systemTextFieldActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_systemTextFieldActionPerformed
    // Add your handling code here:
    listButtonActionPerformed (evt);
  }//GEN-LAST:event_systemTextFieldActionPerformed

  // Hitting ENTER in the textfield is the same as pressing the button.
  private void listButtonActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listButtonActionPerformed
    // Add your handling code here:
    java.awt.Cursor cursor = getCursor();
    setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
    reinstanceServerFromTextEntry();
    reinstanceUserList();
    if (null != vUserList1 && null != serviceRecord) {
      loadUsers();
      setDetailsPaneRoot();
    }
    setCursor(cursor);
  }//GEN-LAST:event_listButtonActionPerformed

  private synchronized void reinstanceServerFromTextEntry() {
    String newName = systemTextField.getText();
    if (null == serverName) {
      serverName = "";
    }
    if (null != newName) {
      if (!newName.equals("")) {
        if (!newName.equals(serverName)) {
          serverName = newName;
          if (null != serviceRecord) {

            try { // let go of the service from manager
              manager.freeService(serviceRecord);
            }
            catch (Exception e) {
              e.printStackTrace();
            }
            serviceRecord = null;
          }
          try {
            serviceRecord = manager.getService("qcmgr:" + serverName + "/COMMAND", this);
          }
          catch (Exception e) {
            e.printStackTrace();
          }
        }
      }
    }
  }
  private synchronized void reinstanceUserList () {
    vUserList1 = new com.ibm.as400.vaccess.VUserList(serviceRecord.as400);
    if (null != errorDialogAdapter) {
      vUserList1.addErrorListener(errorDialogAdapter);
    }
  }

  private void setDetailsPaneRoot() {
    if (null != vUserList1) {
      try {
        aS400DetailsPane1.setRoot(vUserList1);
      }
      catch (java.beans.PropertyVetoException e) {
        e.printStackTrace();
      }
    }
  }

  private void loadUsers () {
    vUserList1.load();
  }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private com.ibm.as400.vaccess.VUserList vUserList1;
  private com.ibm.as400.vaccess.AS400DetailsPane aS400DetailsPane1;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JLabel systemLabel;
  private javax.swing.JTextField systemTextField;
  private javax.swing.JButton listButton;
  private javax.swing.JLabel userListLabel;
  // End of variables declaration//GEN-END:variables

  /** Sets the QCMgr object which will handle AS400 instances for this client.
   * @param mgr A QCMgr object.
   */
  public void setManager(QCMgr mgr) {
    manager = mgr;
  }

  /** Connects the ErrorDialogAdapter with any as400.vaccess components present.
   * @param eda An instance of an ErrorDialogAdapter already associated
   * with a suitable Frame.
   */
  public void propagateEDA(com.ibm.as400.vaccess.ErrorDialogAdapter eda) {
    errorDialogAdapter=eda;
    aS400DetailsPane1.addErrorListener(eda);
    vUserList1.addErrorListener(eda);
  }
  /** Required implementantion of the QCServiceClient interface. Releases the
   * AS400 object provided by the server.
   * @param sr The service record which represents the AS400 to be
   * relinquished.
   */
  public void relinquish(QCServiceRecord sr) {
    serviceRecord = null;
  }
}
