///////////////////////////////////////////////////////////////////////////////
//                                                                             
// JTOpen (IBM Toolbox for Java - OSS version)                                 
//                                                                             
// Filename: ResultSet.java
//                                                                             
// The source code contained herein is licensed under the IBM Public License   
// Version 1.0, which has been approved by the Open Source Initiative.         
// Copyright (C) 1997-2001 International Business Machines Corporation and     
// others. All rights reserved.                                                
//                                                                             
///////////////////////////////////////////////////////////////////////////////

package java.sql;

/**
 *  A table of data representing a database result set, which is usually generated by executing a statement that queries
 *  the database. 
 *  <p>
 *  A ResultSet object maintains a cursor pointing to its current row of data. Initially the cursor is positioned
 *  before the first row. The next method moves the cursor to the next row, and because it returns false when
 *  there are no more rows in the ResultSet object, it can be used in a while loop to iterate through the result set. 
 *  <p>
 *  A default ResultSet object is not updatable and has a cursor that moves forward only. Thus, it is possible to
 *  iterate through it only once and only from the first row to the last row. New methods in the JDBC 2.0 API make
 *  it possible to produce ResultSet objects that are scrollable and/or updatable. 
 *  <p>
 *  A <code>ResultSet</code> object is automatically closed when the Statement object that generated it is closed,
 *  re-executed, or used to retrieve the next result from a sequence of multiple results. 
 *  <p>
 *  The number, types and properties of a ResultSet object's columns are provided by the ResultSetMetaData
 *  object returned by the ResultSet.getMetaData method. 
 *  <p>
 *  <b>Note:</b>This class contains the smallest useful set of methods and data from java.sql.ResultSet
 */
public interface ResultSet
{
    /**
     *  The constant indicating the type for a ResultSet object whose cursor may move only forward.
     **/
    public final int TYPE_FORWARD_ONLY = 1003;

    /**
     *  The constant indicating the type for a ResultSet object that is scrollable but generally not sensitive to changes made by others.
     **/
    public final int TYPE_SCROLL_INSENSITIVE = 1004;

    /**
     *  The constant indicating the type for a ResultSet object that is scrollable and generally sensitive to changes made by others.
     **/
    public final int TYPE_SCROLL_SENSITIVE = 1005;

    /**
     *  The constant indicating the concurrency mode for a ResultSet object that may NOT be updated.
     **/
    public final int CONCUR_READ_ONLY = 1007;

    /**
     *  The constant indicating the concurrency mode for a ResultSet object that may be updated.
     **/
    public final int CONCUR_UPDATABLE = 1008;


    /**
     *  Releases this ResultSet object's database and JDBC resources immediately instead of waiting for this to
     *  happen when it is automatically closed. 
     *
     *  <b>Note:</b> A ResultSet object is automatically closed by the Statement object that generated it when that
     *  Statement object is closed, re-executed, or is used to retrieve the next result from a sequence of multiple
     *  results. A ResultSet object is also automatically closed when it is garbage collected.
     *
     * @exception SQLException if a database access error occurs.
     **/
    void close() throws SQLException;

    /**
     *  Deletes the current row from this ResultSet object and from the underlying database. This method
     *  cannot be called when the cursor is on the insert row.
     *
     * @exception SQLException if a database access error occurs or if this method is called when the cursor is on the insert row.
     **/
    void deleteRow() throws SQLException;

    /**
     *  Gets the value of the designated column in the current row of this ResultSet object as a String in the
     *  Java programming language.
     *
     *  @param column the first column is 1, the second is 2, ...
     *
     *  @return the column value; if the value is SQL NULL, the value returned is null.
     *
     * @exception SQLException if a database access error occurs.
     **/
    String getString(int column) throws SQLException;

    /**
     *  Gets the value of the designated column in the current row of this ResultSet object as an int in the Java programming language.
     *
     *  @param column the first column is 1, the second is 2, ...
     *
     *  @return the column value; if the value is SQL NULL, the value returned is 0.
     *
     * @exception SQLException if a database access error occurs.
     **/
    int getInt(int column) throws SQLException;

    /**
     *  Inserts the contents of the insert row into this ResultSet object and into the database. The cursor must
     *  be on the insert row when this method is called.
     *
     * @exception SQLException  if a database access error occurs, if this method is called when the cursor is not
     *                                        on the insert row, or if not all of non-nullable columns in the insert row have been given a value
     **/
    void insertRow() throws SQLException;

    /**
     *  Moves the cursor to the insert row. The current cursor position is remembered while the cursor is
     *  positioned on the insert row. 
     *
     * @exception SQLException if a database access error occurs or the result set is not updatable.
     **/
    void moveToInsertRow() throws SQLException;

    /**
     *  Moves the cursor to the remembered cursor position, usually the current row. This method has no effect if
     *  the cursor is not on the insert row.
     *
     * @exception SQLException if a database access error occurs or the result set is not updatable.
     **/
    void moveToCurrentRow() throws SQLException;

    /**
     *  Moves the cursor down one row from its current position. A ResultSet cursor is initially positioned
     *  before the first row; the first call to the method next makes the first row the current row; the second call
     *  makes the second row the current row, and so on. 
     *
     *  If an input stream is open for the current row, a call to the method next will implicitly close it. A
     *  ResultSet object's warning chain is cleared when a new row is read.
     *
     *  @return true if the new current row is valid; false if there are no more rows.
     *
     * @exception SQLException if a database access error occurs.
     **/
    boolean next() throws SQLException;

    /**
     *  Moves the cursor to the previous row in this ResultSet object. 
     *
     *  <b>Note:</b> Calling the method <code>previous()</code> is not the same as calling the method <code>relative(-1)</code> because it
     *  makes sense to call previous() when there is no current row. 
     *
     *  @return true if the cursor is on a valid row; false if it is off the result set.
     *
     * @exception SQLException if a database access error occurs or the result set type is TYPE_FORWARD_ONLY.
     **/
    boolean previous() throws SQLException;

    /**
     *  Moves the cursor a relative number of rows, either positive or negative. Attempting to move beyond the
     *  first/last row in the result set positions the cursor before/after the the first/last row. Calling relative(0) is
     *  valid, but does not change the cursor position. 
     *  
     *  <b>Note:</b> Calling the method <code>relative(1)</code> is different from calling the method next() because is makes
     *  sense to call <code>next()</code> when there is no current row, for example, when the cursor is positioned before the
     *  first row or after the last row of the result set.
     *
     *  @return true if the cursor is on a row; false otherwise.
     *
     * @exception SQLException if a database access error occurs, there is no current row, or the result set type is TYPE_FORWARD_ONLY.
     **/
    boolean relative(int rows) throws SQLException;

    /**
     *  Moves the cursor to the first row in this ResultSet object.
     *
     *  @return true if the cursor is on a valid row; false if there are no rows in the result set.
     *
     * @exception SQLException  if a database access error occurs or the result set type is TYPE_FORWARD_ONLY.
     **/
    boolean first() throws SQLException;

    /**
     *  Moves the cursor to the last row in this ResultSet object.
     *
     *  @return true if the cursor is on a valid row; false if there are no rows in the result set
     *
     *  @exception SQLException  if a database access error occurs or the result set type is TYPE_FORWARD_ONLY.
     **/
    boolean last() throws SQLException;

    /**
     *  Moves the cursor to the given row number in this ResultSet object. 
     *
     *  If the row number is positive, the cursor moves to the given row number with respect to the beginning of
     *  the result set. The first row is row 1, the second is row 2, and so on. 
     *  
     *  If the given row number is negative, the cursor moves to an absolute row position with respect to the end
     *  of the result set. For example, calling the method absolute(-1) positions the cursor on the last row;
     *  calling the method absolute(-2) moves the cursor to the next-to-last row, and so on. 
     *
     *  An attempt to position the cursor beyond the first/last row in the result set leaves the cursor before the first
     *  row or after the last row. 
     *
     *  <b>Note:</b> Calling <code>absolute(1)</code> is the same as calling <code>first()</code>. Calling <code>absolute(-1)</code> is the same as calling
     *  <code>last()</code>.
     *
     *  @return true if the cursor is on the result set; false otherwise.
     *
     * @exception SQLException if a database access error occurs, the row is 0, or the result set type is TYPE_FORWARD_ONLY.
     **/
    boolean absolute(int row) throws SQLException;

    /**
     *  Updates the designated column with a String value.
     *
     *  @param index the first column is 1, the second is 2, ..
     *  @param value the new column value.
     *
     * @exception SQLException if a database access error occurs.
     **/
    void updateString(int index, String value) throws SQLException;

    /**
     *  Updates the designated column with an int value. 
     *
     *  @param index the first column is 1, the second is 2, ..
     *  @param value the new colum value
     *
     * @exception SQLException if a database access error occurs.
     **/
    void updateInt(int index, int value) throws SQLException;

    /**
     *  Updates the underlying database with the new contents of the current row of this ResultSet object. This
     *  method cannot be called when the cursor is on the insert row.
     *
     * @exception SQLException if a database access error occurs or if this method is called when the cursor is on the insert row
     **/
    void updateRow() throws SQLException;

    /**
     *  Returns the type of this ResultSet object. The type is determined by the Statement object that created the result set.
     *
     *  @return TYPE_FORWARD_ONLY, TYPE_SCROLL_INSENSITIVE, or TYPE_SCROLL_SENSITIVE
     *
     * @exception SQLException if a database access error occurs.
     **/
    int getType() throws SQLException;

    /**
     *  Returns the concurrency mode of this ResultSet object. The concurrency used is determined by the Statement object that created the result set.
     *
     *  @return the concurrency type, either CONCUR_READ_ONLY or CONCUR_UPDATABLE.
     *
     * @exception SQLException if a database access error occurs.
     **/
    int getConcurrency() throws SQLException;

    /**
     *  Returns the Statement object that produced this ResultSet object. If the result set was generated some
     *  other way, such as by a DatabaseMetaData method, this method returns null.
     *
     *  @return the Statment object that produced this ResultSet object or null if the result set was produced some other way.
     *
     * @exception SQLException if a database access error occurs.
     **/
    Statement getStatement() throws SQLException;

    /**
     *  Retrieves the number, types and properties of this ResultSet object's columns.
     *
     *  @return the description of this ResultSet object's columns.
     *
     * @exception SQLException if a database access error occurs.
     **/
    ResultSetMetaData getMetaData() throws SQLException;
}
