<!--///////////////////////////////////////////////////////////////////////////
//                                                                             
// JTOpen (IBM Toolbox for Java - OSS version)                              
//                                                                             
// Filename: buildEclipse.xml
//
// This will build the jar files using the source in the eclipse projects as 
// source.  This is a modified version of build.xml. 
//                                                                             
// The source code contained herein is licensed under the IBM Public License   
// Version 1.0, which has been approved by the Open Source Initiative.         
// Copyright (C) 1997-2003 International Business Machines Corporation and     
// others. All rights reserved.                                                
//                                                                             
///////////////////////////////////////////////////////////////////////////////
//
// Getting Started
// 
//
// Pre-requisites:
//   - JDK 1.4.1 (or higher)
//   - Apache Ant 1.5
//   - CVS client (to download source)
//
// 1. In this file, change the value of the "build" property to be the directory
//    where you want the JTOpen files to be downloaded and built to. It
//    defaults to "/jtopen_build" (which is C:\jtopen_build on Windows).
//
// 2. Make sure Ant is installed and in your CLASSPATH, and you are familiar
//    with how to run builds using Ant.
//    See http://ant.apache.org to download and read up on it.
//    For those with less time on their hands, get the binary from:
//    http://jakarta.apache.org/builds/jakarta-ant/release/v1.5/bin/
//    Once installed, add the ant.jar to your CLASSPATH.
//    To run a build:
//      java org.apache.tools.ant.Main target1 target2 target3 ...
//    This assumes that a "build.xml" file (such as this one) exists in your
//    current directory. Override this by using the -file flag.
//
// 3. In order to download the source, you need a CVS client installed and in
//    your path.  If you don't, Ant will not be able to automatically
//    download the JTOpen source repository... you will have to do it by hand.
//    Most distributions of Linux ship a 'cvs' client.  See http://www.wincvs.org
//    for a Windows version.
//    (Make sure that cvs.exe is in your PATH when you run Ant.
//    If you get an "access method is not installed on this system" error,
//    try moving cvs.exe to a different directory than where build.xml is located.)
//
// 4. Run the "source" target for this build. This will download the
//    additional Ant tasks that are required, and set up the initial
//    directory structure. Ironically, this file will get downloaded in
//    this step... so if you're reading this, you've already done that,
//    or you've just overwritten your own build.xml with this one.  :)
//
// 5. Obtain the necessary include files from the list of requisite jars and
//    place them in the "/jtopen_build/include" directory. Also obtain the
//    necessary executables and place them in the "/jtopen_build/bin" directory.
//    See below for these lists. Note that the "clean" target of this build
//    does not remove anything in the "/jtopen_build/include" or
//    "/jtopen_build/build" directories.
//
// 6. Add the "/jtopen_build/build" directory to your CLASSPATH. This is so
//    the Ant build can pick up the tasks it needs to create the PCML files.
//
// 7. Run any of the targets in this file. To build JTOpen cleanly, it is
//    suggested that you run it like this:
//
//      java org.apache.tools.ant.Main clean clean-source source all
//
// 8. Output files will appear in the "/jtopen_build/dist" directory, as well as
//    "/jtopen_build/javadoc" and the various "/jtopen_build/output*" directories.
//
///////////////////////////////////////////////////////////////////////////////
// 
// Requisite jars and packages
// 
// The following is a list of jar files and the URLs from which they can be
// obtained. These jar files are required in order to build JTOpen. We cannot
// include these jar files in the JTOpen CVS repository due to licensing issues.
// These files needs to be placed in the /jtopen_build/include directory after
// they are downloaded.
//
// *** Required under JDK 1.4: ***
//
//
// Filename: servlet.jar
// Location: http://java.sun.com/products/servlet/archive.html
// Description: JSDK 2.1 Servlet APIs needed for the com.ibm.as400.util.servlet package.
//              Extract the servlet.jar from the jsdk zip file after download.
//
//
// Filename: midpapi10.jar
// Location: http://java.sun.com/products/sjwtoolkit/
// Description: J2ME Wireless Toolkit MIDP APIs needed for the com.ibm.as400.micro package.
//              Note:  The J2ME Wireless Toolkit can only be installed on Windows or Linux.
//              (The midpapi10.jar file can be found in C:\WTKxx\lib after the install, where "xx" is the J2ME WTK version number.)
//
//
// Filename: cldcapi10.jar
// Location: http://java.sun.com/products/sjwtoolkit/
// Description: J2ME Wireless Toolkit CLDC APIs needed for the com.ibm.as400.micro package.
//              Note:  The J2ME Wireless Toolkit can only be installed on Windows or Linux.
//              (The cldcapi10.jar file can be found in C:\WTKxx\lib after the install, where "xx" is the J2ME WTK version number.)
//
///////////////////////////////////////////////////////////////////////////////
//
// Requisite executables
//
//
// Filename: preverify or preverify.exe
// Location: http://java.sun.com/products/sjwtoolkit/
// Description: J2ME Wireless Toolkit preverification tool required to build the
//              jt400Micro.jar. This file needs to be in the /jtopen_build/bin directory.
//              Note:  The J2ME Wireless Toolkit can only be installed on Windows or Linux.
//              (The preverify.exe file can be found in C:\WTKxx\bin after the install, where "xx" is the J2ME WTK version number.)
//
//
// Filename: preverify1.1 or preverify1.1.exe
// Location: http://java.sun.com/products/sjwtoolkit/
// Description: J2ME Wireless Toolkit preverification tool required to build the 
//              jt400Micro.jar. This file needs to be in the /jtopen_build/bin directory.
//              Note:  The J2ME Wireless Toolkit can only be installed on Windows or Linux.
//              (The preverify1.1.exe file can be found in C:\WTKxx\bin after the install, where "xx" is the J2ME WTK version number.)
//
//
// Filename: cvs or cvs.exe
// Location: http://www.wincvs.org
// Description: Required to access the JTOpen CVS repository using the "source" target.
//              This file must be in the PATH when this Ant script is run.
//              It may need to be in a different directory than the build.xml file.
//              Most versions of Linux already include a cvs executable.
//              The location link is for Windows users to obtain a CVS client.
//
///////////////////////////////////////////////////////////////////////////////
// 
// Useful targets
//
//    usage         - This is the default. Prints information on available targets.
//    all           - Builds everything (compile, jar, zip, javadoc...),
//                    assuming the source has been downloaded.
//    clean         - Removes all built files and javadoc. Does not remove the /include
//                    or /build subdirectories. This target is not a pre-requisite for any other
//                    targets.
//    jar           - Builds just the jars (and any pre-requisite targets, such as compile...).
//    javadoc       - Builds just the javadoc (assuming the source has been downloaded).
//    micro         - Builds just the jt400Micro.jar (including compiling and pre-verification).
//    zip           - Builds just the doc.zip and src.zip files, assuming the source has
//                    been downloaded and the javadoc has been built.
//                    
// Suggested build invocation:
//
//   java org.apache.tools.ant.Main clean all
//
// The resulting jar and zip files can be found in the "dist" subdirectory.
// The resulting class files can be found in the various "output" subdirectories.
// The resulting javadoc can be found in the "javadoc" subdirectory.
//
// Note: The xerces-4.0 target has been removed, since the JTOpen source code has been
//       updated to use JAXP-compliant APIs.
//
// Note: The javadoc target can build the javadoc to the best of its ability. However,
//       many warnings will appear for some of the files that have pre-requisites that are
//       not required for compilation. Namely, these pre-requisites are:
//
//         jui400.jar   - A Graphical Toolbox jar file needed to generate javadoc for the
//                        AS400JDBCDataSourcePane classes in the com.ibm.as400.vaccess package.
//                        It is shipped in the main JTOpen download zip file, or as part of
//                        the IBM Toolbox for Java licensed program download.
//         sslightx.zip - The SSLight code used by some of the AS400 connection infrastructure
//                        when Secure Sockets Layer encryption is used. This file is considered
//                        IBM-restricted and can be obtained from one of the various "CE" products
//                        on your system.
//
////////////////////////////////////////////////////////////////////////////-->
  

<project name="JTOpen" default="jar">
  

<!--///////////////////////////////////////////////////////////////////////////
    // PROPERTIES
    ///////////////////////////////////////////////////////////////////////////-->

  <!-- The "build" value is the root directory in which the JTOpen
       files will get downloaded and built. All of the other
       subdirectories required by this build stem off of this
       directory. --> 
  <property name="build" value="/jtopen_build"/>

  <property name="userid" value="eberhard"/>
  <property name="password" value="XXXXX"/>
  <property name="v7r2server"  value="minibld2.rchland.ibm.com"/>
  <property name="v7r1server"  value="lp08ut23.rchland.ibm.com"/>
  <property name="v6r1server1" value="fowgai2.rchland.ibm.com"/>          
  <property name="v6r1server2" value="rchaptf2.rchland.ibm.com"/>       
  <property name="v5r4server"  value="lp03ut5.rchland.ibm.com"/>
  <property name="linuxserver" value="lena6.rchland.ibm.com"/>
  <property name="linuxuserid"   value="jeber"/>
  <property name="linuxpassword" value="XXXXX"/>

	
  <property name="jdk14home" value="C:/jdk1.4"/>
	
  <property name="bin" value="${build}/bin"/>  
  <property name="source" value="${basedir}/../src"/>
  <property name="jdbc40source" value="${basedir}/../jdbc40"/>
  <property name="source-jdbc40" value="${basedir}/../jdbc40"/>
  <property name="source-jdbc40-combined" value="${build}/jdbc40-combined"/>
  <property name="source-contrib" value="${build}/contrib"/>
  <property name="source-micro" value="${build}/micro"/>
  <property name="dist" value="${build}/dist14"/>
  <property name="dist6" value="${build}/dist6"/>
  <property name="include" value="${build}/include"/>
  <property name="stubs" value="${build}/stubs"/> <!-- stubs are classes we need for compiling, but we don't ship. -->
  <property name="javadoc" value="${build}/javadoc"/>
  <property name="javadoc6" value="${build}/javadoc6"/>
  <property name="output" value="${build}/output14"/>
  <property name="output6" value="${build}/output6"/>
  <property name="output-micro" value="${build}/output-micro"/>
  <property name="output-micro-verified" value="${build}/output-micro-verified"/>

  <property name="build.sysclasspath" value="ignore"/>
  
  <property name="doclink" value="http://java.sun.com/j2se/1.4.2/docs/api/"/>
  <property name="doclink6" value="http://java.sun.com/javase/6/docs/api/"/>
    
  <property name="show-progress" value="false"/>

  <!-- These local socket optimizations are only beneficial when running
       Java code on OS/400 that connects to localhost. They are not required. -->
  <patternset id="exclude.local.socket.implementation">
    <exclude name="com/ibm/as400/access/SocketContainerUnix.class"/>
    <exclude name="com/ibm/as400/access/UnixSocket.class"/>
    <exclude name="com/ibm/as400/access/UnixSocketImpl.class"/>
    <exclude name="com/ibm/as400/access/UnixSocketInputStream.class"/>
    <exclude name="com/ibm/as400/access/UnixSocketOutputStream.class"/>
    <exclude name="com/ibm/as400/access/UnixSocketUser.class"/>
    <exclude name="com/ibm/as400/access/SocketContainerUnix2.class"/>
    <exclude name="com/ibm/as400/access/SocketContainerUnix2$1.class"/>
    <exclude name="com/ibm/as400/access/SocketContainerUnix2$SCUInputStream.class"/>
    <exclude name="com/ibm/as400/access/SocketContainerUnix2$SCUOutputStream.class"/>
  </patternset>
    
  <!-- These optimizations are for executing certain Toolbox functions on-thread and
       in-process when running Java code on OS/400 that connects to localhost.
       They use JNI calls instead of socket calls to the Client Access Host Servers.
       They are not required for normal operations. -->
  <patternset id="exclude.native.optimizations">
    <exclude name="com/ibm/as400/access/AS400CertificateUsrPrfUtilImplNative.class"/>
    <exclude name="com/ibm/as400/access/AS400CertificateUtilImplNative.class"/>
    <exclude name="com/ibm/as400/access/AS400CertificateVldlUtilImplNative.class"/>
    <exclude name="com/ibm/as400/access/AS400FileImplNative.class"/>
    <exclude name="com/ibm/as400/access/AS400ImplNative.class"/>
    <exclude name="com/ibm/as400/access/BaseDataQueueImplNative.class"/>
    <exclude name="com/ibm/as400/access/BytesWithOffset.class"/>
    <exclude name="com/ibm/as400/access/LocalIOFB.class"/>
    <exclude name="com/ibm/as400/access/LocalOpenFeedback.class"/>
    <exclude name="com/ibm/as400/access/MessageFBDataFormat.class"/>
    <exclude name="com/ibm/as400/access/MessageFBFormat.class"/>
    <exclude name="com/ibm/as400/access/NativeVersion.class"/>
    <exclude name="com/ibm/as400/access/NLSImplNative.class"/>
    <exclude name="com/ibm/as400/access/ProfileHandleImplNative.class"/>
    <exclude name="com/ibm/as400/access/ProfileTokenImplNative.class"/>
    <exclude name="com/ibm/as400/access/RemoteCommandImplNative.class"/>
    <exclude name="com/ibm/as400/access/UserSpaceImplNative.class"/>
  </patternset>



<!--///////////////////////////////////////////////////////////////////////////
    // TARGETS
    ///////////////////////////////////////////////////////////////////////////-->

<!--///////////////////////////////////////////////////////////////////////////
    // Target: all
    ///////////////////////////////////////////////////////////////////////////-->
  <target name="all" depends="jar,javadoc,javadoc6,zip"/>

  
<!--///////////////////////////////////////////////////////////////////////////
    // Target: clean
    ///////////////////////////////////////////////////////////////////////////-->
  <target name="clean" depends="clean-javadoc,clean-dist,clean-output"/>
  
  <target name="clean-dist">
    <delete dir="${dist}"/>
  </target>
  
  <target name="clean-javadoc">
    <delete dir="${javadoc}"/>
  </target>
  
  <target name="clean-output">
    <delete dir="${output}"/>
    <delete dir="${output-micro}"/>
    <delete dir="${output-micro-verified}"/>
  </target>
  


	<!--///////////////////////////////////////////////////////////////////////////
	    // Target: compile6
	    ///////////////////////////////////////////////////////////////////////////-->
	  <target name="compile6" depends="source6">
	    <fail message="Not using JDK 1.6 or higher." unless="jdk16Exists"/>
	    <fail message="Can't find ${include}/servlet.jar." unless="servletJarExists"/>
	    <javac nowarn="on" srcdir="${source-jdbc40-combined}:${source-contrib}"
	           destdir="${output6}"
	           memoryMaximumSize="256m"
	           failonerror="true"
	           debug="on"
	           debuglevel="lines,source"
	           fork="true"
		   source="5"
		   target="5">
	      <classpath>
	        <pathelement path="${include}"/>
	        <pathelement location="${include}/servlet.jar"/> <!-- Need the JSDK classes to compile the com.ibm.as400.util.servlet package. -->
	      	<pathelement location="${include}/jui400.jar"/> <!-- Need this for the AS400JDBCDataSourcePane in the com.ibm.as400.vaccess package. -->
	      	<pathelement location="${stubs}"/>
	      </classpath>
	      
	    </javac>
	    <copy file="${source}/utilities/INMRI.pro"
	          preservelastmodified="yes"
	          tofile="${output}/utilities/INMRI.properties"/>
	    <copy file="${source}/utilities/UTMRI.pro"
	          preservelastmodified="yes"
	          tofile="${output}/utilities/UTMRI.properties"/>
	  </target>


  
<!--///////////////////////////////////////////////////////////////////////////
    // Target: compile
    ///////////////////////////////////////////////////////////////////////////-->
  <target name="compile" depends="init">
    <fail message="Not using JDK 1.4 or higher." unless="jdk14Exists"/>
    <fail message="Can't find ${include}/servlet.jar." unless="servletJarExists"/>

    <javac srcdir="${source}:${source-contrib}"
           destdir="${output}"
           memoryMaximumSize="256m"
           failonerror="true"
           debug="on"
           debuglevel="lines,source"
           fork="true"
           encoding="iso-8859-1"
    	   executable="${jdk14home}/bin/javac"
    	   compiler="javac1.4"
    	   source="1.2"
           target="1.1">
      <classpath>
        <pathelement path="${include}"/>
        <pathelement location="${include}/servlet.jar"/> <!-- Need the JSDK classes to compile the com.ibm.as400.util.servlet package. -->
      	<pathelement location="${include}/jui400.jar"/> <!-- Need this for the AS400JDBCDataSourcePane in the com.ibm.as400.vaccess package. -->
        <pathelement location="${stubs}"/>
      </classpath>
    </javac>
    <copy file="${source}/utilities/INMRI.pro"
          preservelastmodified="yes"
          tofile="${output}/utilities/INMRI.properties"/>
    <copy file="${source}/utilities/UTMRI.pro"
          preservelastmodified="yes"
          tofile="${output}/utilities/UTMRI.properties"/>
  </target>

  <target name="compile-micro" depends="init">
    <fail message="Not using JDK 1.4 or higher." unless="jdk14Exists"/>
    <fail message="Can't find ${include}/midpapi10.jar." unless="midpapiJarExists"/>
    <fail message="Can't find ${include}/cldcapi10.jar." unless="cldcapiJarExists"/>
    <javac srcdir="${source-micro}:${source}"
           destdir="${output-micro}"
           failonerror="true"
           debug="on"
           debuglevel="lines,source"
           fork="true"
           encoding="iso-8859-1"
           target="1.1">
      <include name="com/ibm/as400/micro/*.java"/>
      <include name="java/sql/*.java"/>
      
      <!-- These classes only belong in the ME server, not the client. -->
      <exclude name="com/ibm/as400/micro/ConnectionHandler.java"/>
      <exclude name="com/ibm/as400/micro/JdbcMeService.java"/>
      <exclude name="com/ibm/as400/micro/MEServer.java"/>
      <exclude name="com/ibm/as400/micro/MicroDataInputStream.java"/>
      <exclude name="com/ibm/as400/micro/MicroDataOutputStream.java"/>
      <exclude name="com/ibm/as400/micro/ResourceBundleLoader_m.java"/>
      <exclude name="com/ibm/as400/micro/ResultSetHandler.java"/>
      <exclude name="com/ibm/as400/micro/Service.java"/>
      <exclude name="com/ibm/as400/micro/StatementHandler.java"/>
      
      <bootclasspath>
        <pathelement path="${include}/midpapi10.jar:${include}/cldcapi10.jar:${include}"/>
      </bootclasspath>
    </javac>
  </target>      
  

<!--///////////////////////////////////////////////////////////////////////////
    // Target: init
    ///////////////////////////////////////////////////////////////////////////-->
  <target name="init">
    <tstamp/>
    <mkdir dir="${build}"/>
    <mkdir dir="${dist}"/>
    <mkdir dir="${javadoc}"/>
    <mkdir dir="${javadoc6}"/>
    <!-- mkdir dir="${include}"/ -->
    <mkdir dir="${output}"/>
    <mkdir dir="${output-micro}"/>
    <mkdir dir="${output-micro-verified}"/>
    <mkdir dir="${bin}"/>
    
    <condition property="jdk16Exists">
      <available classname="java.sql.SQLXML"/>
    </condition>

    <condition property="jdk14Exists">
      <available classname="java.nio.Buffer"/>
    </condition>
    
    <condition property="servletJarExists">
      <available file="${include}/servlet.jar" type="file"/>
    </condition>
    
    <condition property="midpapiJarExists">
      <available file="${include}/midpapi10.jar" type="file"/>
    </condition>
    
    <condition property="cldcapiJarExists">
      <available file="${include}/cldcapi10.jar" type="file"/>
    </condition>
    
    <condition property="javadocIncludesExist">
      <and>
        <available file="${include}/servlet.jar" type="file"/>
        <available file="${include}/midpapi10.jar" type="file"/>
        <available file="${include}/cldcapi10.jar" type="file"/>
        <available file="${include}/jui400.jar" type="file"/>
        <available file="${include}/sslightx.zip" type="file"/>
      </and>
    </condition>
  </target>



<!--///////////////////////////////////////////////////////////////////////////
    // Target: jar
    ///////////////////////////////////////////////////////////////////////////-->
  	
  <target name="jar" depends="jar-jt400,jar-jt400Micro,jar-jt400Native,jar-jt400Proxy,jar-jt400Servlet,jar-jt4006"/>

  <!-- Note that the utilities package is now included in the jt400.jar. -->  
  <target name="jar-jt400" depends="init,compile,pcml,copyright">
    <jar jarfile="${dist}/jt400.jar" manifest="jt400_manifest.txt">
      <fileset dir="${output}">
        <patternset refid="exclude.native.optimizations"/>
        <patternset refid="exclude.local.socket.implementation"/>
        <patternset>
            <exclude name="com/ibm/as400/util/html/**"/>
            <exclude name="com/ibm/as400/util/servlet/**"/>
        </patternset>
      </fileset>
      <fileset dir="${include}"
               includes="com/ibm/as400/**,utilities/**"
               excludes="**/*.java">
        <patternset refid="exclude.native.optimizations"/>
        <patternset refid="exclude.local.socket.implementation"/>
      </fileset>
      <fileset dir="${source}"
               includes="**/*.gif,**/*.ser,**/*.dtd,**/*.xsl,**/*.xsd"
               excludes="com/ibm/as400/util/html/**,com/ibm/as400/util/servlet/**"/>
      <fileset dir="${build}" includes="license.html"/>
    </jar>
    <checksum file="${dist}/jt400.jar"/>
  </target>

	  <target name="jar-jt4006" depends="init,jar-jt400,compile6,pcml6,copyright6">
	    <jar jarfile="${dist6}/jt400.jar" manifest="jt400_manifest.txt">
	      <fileset dir="${output6}">
	        <patternset refid="exclude.native.optimizations"/>
	        <patternset refid="exclude.local.socket.implementation"/>
	        <patternset>
	        	<!-- These are shipped in jt400Servlet.jar --> 
	        	<exclude name="com/ibm/as400/util/html/**"/> 
	            <exclude name="com/ibm/as400/util/servlet/**"/>
	        </patternset>
	      </fileset>
	      <fileset dir="${include}"
	               includes="com/ibm/as400/**,utilities/**"
	               excludes="**/*.java">
	        <patternset refid="exclude.native.optimizations"/>
	        <patternset refid="exclude.local.socket.implementation"/>
	      </fileset>
	      <fileset dir="${source}"
	               includes="**/*.gif,**/*.ser,**/*.dtd,**/*.xsl,**/*.xsd"
	               excludes="com/ibm/as400/util/html/**,com/ibm/as400/util/servlet/**"/>
	      <fileset dir="${build}" includes="license.html"/>
	      <fileset dir="${build}/build" includes="META-INF/services/java.sql.Driver"/> <!-- jdbc 4.0 driver manifest -->

	    </jar>
	    <checksum file="${dist6}/jt400.jar"/>
	  </target>

	
  <target name="jar-jt400Micro" depends="init,compile-micro,micro-preverify">
    <jar jarfile="${dist}/jt400Micro.jar" manifest="jt400Micro_manifest.txt">
      <fileset dir="${output-micro-verified}" includesfile="${build}/build/micro.includes"/>
      <fileset dir="${build}" includes="license.html"/>
    </jar>
    <checksum file="${dist}/jt400Micro.jar"/>
  </target>

  <target name="jar-jt400Native" depends="init,compile,pcml,copyright">
    <jar jarfile="${dist}/jt400Native.jar" manifest="jt400Native_manifest.txt">
      <fileset dir="${output}">
        <patternset>
            <!-- Exclude everything in the 'utilities' package except the AboutToolbox class. -->
            <exclude name="utilities/*Installer*"/>
            <!-- <exclude name="utilities/*JarMaker*"/> -->
            <!-- <exclude name="utilities/*JPing*"/> -->
            <exclude name="utilities/*RunJava*"/>
            <exclude name="utilities/*.properties"/>
            <exclude name="com/ibm/as400/vaccess/**"/>
        </patternset>
      </fileset>
      <fileset dir="${include}">
        <patternset>
            <include name="com/ibm/as400/**"/>
            <exclude name="com/ibm/as400/vaccess/**"/>
            <exclude name="**/*.java"/>
        </patternset>
      </fileset>
      <fileset dir="${source}"
               includes="**/*.gif,**/*.ser,**/*.dtd,**/*.xsl,**/*.xsd"
               excludes="com/ibm/as400/vaccess/**"/>
      <fileset dir="${build}" includes="license.html"/>
    </jar>
    <checksum file="${dist}/jt400Native.jar"/>
  </target>
  
  <target name="jar-jt400Proxy" depends="init,compile">
    <jar jarfile="${dist}/jt400Proxy.jar" manifest="jt400Proxy_manifest.txt">
      <fileset dir="${output}" includesfile="${build}/build/proxy.includes"/>
      <fileset dir="${include}" includesfile="${build}/build/proxy.includes"/>
      <fileset dir="${source}" includesfile="${build}/build/proxy.includes"/>
      <fileset dir="${build}" includes="license.html"/>
    </jar>
    <checksum file="${dist}/jt400Proxy.jar"/>
  </target>

  <target name="jar-jt400Servlet" depends="init,compile">
    <jar jarfile="${dist}/jt400Servlet.jar" manifest="jt400Servlet_manifest.txt">
      <fileset dir="${output}">
        <patternset>
            <include name="com/ibm/as400/util/html/**"/>
            <include name="com/ibm/as400/util/servlet/**"/>
            <include name="com/ibm/as400/access/ResourceBundleLoader.class"/>
            <include name="com/ibm/as400/access/ExtendedIllegalArgumentException.class"/>
            <include name="com/ibm/as400/access/ExtendedIllegalStateException.class"/>
            <include name="com/ibm/as400/access/ReturnCodeException.class"/>
            <include name="com/ibm/as400/access/PasswordDialog.class"/>
            <include name="com/ibm/as400/access/SystemProperties.class"/>
            <include name="com/ibm/as400/access/Trace.class"/>
        </patternset>
      </fileset>
      <fileset dir="${source}">
        <patternset>
          <include name="com/ibm/as400/util/html/*.gif"/>
          <include name="com/ibm/as400/util/servlet/*.gif"/>
        </patternset>
      </fileset>
      <fileset dir="${build}" includes="license.html"/>
    </jar>
    <checksum file="${dist}/jt400Servlet.jar"/>
  </target>
  


<!--///////////////////////////////////////////////////////////////////////////
    // Target: javadoc
    ///////////////////////////////////////////////////////////////////////////-->
  <target name="javadoc" depends="init,checkJavadocIncludes">
    <condition property="jdk140Exists"> <!-- Need 1.4.1 or later for javadoc to work on Windows. -->
      <contains string="${java.version}" substring="1.4.0"/>
    </condition>
    <fail message="Not using JDK 1.4.1 or higher." if="jdk140Exists"/>
    <fail message="Not using JDK 1.4 or higher." unless="jdk14Exists"/> <!-- Sanity. -->
    <javadoc packagenames="com.*,utilities"
             excludepackagenames="com.ibm.as400.security"
             sourcepath="${source}:${source-contrib}:${source-micro}:${include}"
             destdir="${javadoc}"
             use="false"
             link="${doclink}"
             maxmemory="256m"
             failonerror="true"
             additionalparam="-breakiterator">
      <classpath>
        <!-- Include these if the user happens to have them, just so
             javadoc generates without any extra warnings. -->
        <pathelement path="${include}"/>
        <pathelement location="${include}/sslightx.zip"/> <!-- Need this for SecureAS400 in the com.ibm.as400.access package. -->
        <pathelement location="${include}/servlet.jar"/> <!-- Need the JSDK classes to compile the com.ibm.as400.util.servlet package. -->
        <pathelement location="${include}/jui400.jar"/> <!-- Need this for the AS400JDBCDataSourcePane in the com.ibm.as400.vaccess package. -->
        <pathelement location="${include}/midpapi10.jar"/> <!-- Need this for the server-side Micro Edition classes. -->
        <pathelement location="${include}/cldcapi10.jar"/> <!-- Need this for the server-side Micro Edition classes. -->
      </classpath>
      <group title="Toolbox General API Packages" packages="com.ibm.as400.access,com.ibm.as400.access.list,com.ibm.as400.data,com.ibm.as400.resource,com.ibm.as400.security.auth,com.ibm.as400.vaccess"/>
      <group title="Toolbox Utility Packages" packages="com.ibm.as400.util,com.ibm.as400.util.html,com.ibm.as400.util.servlet,com.ibm.as400.util.commtrace,utilities"/>
      <group title="Toolbox Micro Edition Packages" packages="com.ibm.as400.micro"/>
      <!-- We skip javadoc-ing the java.sql package, otherwise the regular JDBC classes in the
           com.ibm.as400.access package will get erroneously linked to our stubs. -->
    </javadoc>
  </target>

  <target name="checkJavadocIncludes" unless="javadocIncludesExist">
    <echo>
      WARNING: Generated javadoc will be missing some information.
      Can't find one of:
        ${include}/servlet.jar
        ${include}/midpapi10.jar
        ${include}/cldcapi10.jar
        ${include}/jui400.jar
        ${include}/sslightx.zip
    </echo>
  </target>

	  <target name="javadoc6" depends="init,source6,checkJavadocIncludes">
        <fail message="Not using JDK 1.6 or higher." unless="jdk16Exists"/> <!-- Sanity. -->
	    <javadoc packagenames="com.*,utilities"
	             excludepackagenames="com.ibm.as400.security"
                 sourcepath="${source-jdbc40-combined}:${source-contrib}:${include}"
	             destdir="${javadoc6}"
	             use="false"
	             link="${doclink}"
	             maxmemory="256m"
	             failonerror="true"
	             additionalparam="-breakiterator">
	      <classpath>
	        <!-- Include these if the user happens to have them, just so
	             javadoc generates without any extra warnings. -->
	        <pathelement path="${include}"/>
	        <pathelement location="${include}/sslightx.zip"/> <!-- Need this for SecureAS400 in the com.ibm.as400.access package. -->
	        <pathelement location="${include}/servlet.jar"/> <!-- Need the JSDK classes to compile the com.ibm.as400.util.servlet package. -->
	        <pathelement location="${include}/jui400.jar"/> <!-- Need this for the AS400JDBCDataSourcePane in the com.ibm.as400.vaccess package. -->
	        <pathelement location="${include}/midpapi10.jar"/> <!-- Need this for the server-side Micro Edition classes. -->
	        <pathelement location="${include}/cldcapi10.jar"/> <!-- Need this for the server-side Micro Edition classes. -->
	      </classpath>
	      <group title="Toolbox General API Packages" packages="com.ibm.as400.access,com.ibm.as400.access.list,com.ibm.as400.data,com.ibm.as400.resource,com.ibm.as400.security.auth,com.ibm.as400.vaccess"/>
	      <!-- We skip javadoc-ing the java.sql package, otherwise the regular JDBC classes in the
	           com.ibm.as400.access package will get erroneously linked to our stubs. -->
	    </javadoc>
	  </target>

  
<!--///////////////////////////////////////////////////////////////////////////
    // Target: micro
    ///////////////////////////////////////////////////////////////////////////-->  
  <target name="micro" depends="init,jar-jt400Micro"/>
  
  <target name="micro-preverify" depends="init,compile-micro">
    <condition property="preverifyExeExists">
      <or>
        <and>
          <available file="${bin}/preverify.exe" type="file"/> <!-- Windows. -->
          <os family="windows"/>
        </and>
        <available file="${bin}/preverify" type="file"/>     <!-- Linux/Unix. -->
      </or>
    </condition>
    <fail message="Can't find ${include}/midpapi10.jar." unless="midpapiJarExists"/>
    <fail message="Can't find ${include}/cldcapi10.jar." unless="cldcapiJarExists"/>
    <fail message="Can't find ${bin}/preverify executable." unless="preverifyExeExists"/>
    <echo>Pre-verifying Micro Edition classes</echo>
    <exec dir="${bin}" executable="./preverify" failonerror="true" vmlauncher="false"> 
      <!-- The preverify tool expects directories to be separted by ';' in its -classpath option. -->
      <arg line="-d ${output-micro-verified} -classpath ${include}/midpapi10.jar;${include}/cldcapi10.jar ${output-micro}"/>
    </exec>
  </target>



<!--///////////////////////////////////////////////////////////////////////////
    // Target: pcml
    ///////////////////////////////////////////////////////////////////////////-->
  <target name="pcml" depends="init">
    <condition property="pcmlRuntimeExists">
      <and>
        <available classname="java.nio.Buffer"/> <!-- JDK 1.4 and higher. -->
        <available classname="com.ibm.as400.data.ProgramCallDocument" classpath="${output}:${include}:${source}"/>
      </and>
    </condition>
    <fail message="Can't find PCML runtime." unless="pcmlRuntimeExists"/>
    <taskdef name="pcml" classname="PCMLTask" classpath="."/>
    <pcml srcdir="${source}"
          destdir="${output}"
          classpath="${output}:${include}:${source}"
          includes="**/*.pcml"/>
    <!-- Classpath:
           Need "output" to run the com.ibm.as400.data.ProgramCallDocument class.
           Need "include" for the ProgramCallDocument class to use the AS400 object.
           Need JDK 1.4 or higher (XML) to parse the PCML.
           Need "source" to find the pcml.dtd.  -->
  </target>


	<!--///////////////////////////////////////////////////////////////////////////
	    // Target: pcml
	    ///////////////////////////////////////////////////////////////////////////-->
	  <target name="pcml6" depends="init">
	    <condition property="pcmlRuntimeExists">
	      <and>
	        <available classname="java.nio.Buffer"/> <!-- JDK 1.4 and higher. -->
	        <available classname="com.ibm.as400.data.ProgramCallDocument" classpath="${output}:${include}:${source}"/>
	      </and>
	    </condition>
	    <fail message="Can't find PCML runtime." unless="pcmlRuntimeExists"/>
	    <taskdef name="pcml" classname="PCMLTask" classpath="."/>
	    <pcml srcdir="${source}"
	          destdir="${output6}"
	          classpath="${output6}:${include}:${source}"
	          includes="**/*.pcml"/>
	    <!-- Classpath:
	           Need "output" to run the com.ibm.as400.data.ProgramCallDocument class.
	           Need "include" for the ProgramCallDocument class to use the AS400 object.
	           Need JDK 1.4 or higher (XML) to parse the PCML.
	           Need "source" to find the pcml.dtd.  -->
	  </target>



<!--///////////////////////////////////////////////////////////////////////////
    // Target: copyright
    ///////////////////////////////////////////////////////////////////////////-->
  <target name="copyright" depends="init">
    <taskdef name="copyright" classname="CopyrightInsertionTask" classpath="."/>
    <copyright destdir="${output}"
               includes="**/*.class"
               verbose="${show-progress}"/>
  </target>


	<!--///////////////////////////////////////////////////////////////////////////
	    // Target: copyright6
	    ///////////////////////////////////////////////////////////////////////////-->
	  <target name="copyright6" depends="init">
	    <taskdef name="copyright" classname="CopyrightInsertionTask" classpath="."/>
	    <copyright destdir="${output6}"
	               includes="**/*.class"
	               verbose="${show-progress}"/>
	  </target>


	<!--///////////////////////////////////////////////////////////////////////////
	    // Target: jdbc40src
	    ///////////////////////////////////////////////////////////////////////////-->
	  <target name="jdbc40src" >
	    <taskdef name="jdbc40src" classname="Jdbc40Task" classpath="."/>
	    <jdbc40src destdir="${jdbc40source}"
	               srcdir="${source}"
	    	
	               verbose="${show-progress}"
	    />
	  </target>


	<!--///////////////////////////////////////////////////////////////////////////
	    // Target: source6
	    ///////////////////////////////////////////////////////////////////////////-->
	  <target name="source6" depends="init, jdbc40src">
	<!-- copy all source to new dir, and then copy the new jdbc40 specific files replacing any pre-jdbc40 files -->
	    <copy todir="${source-jdbc40-combined}"  preservelastmodified="yes"> 
	         <fileset dir="${source}"/>  
	    </copy>
	    <copy todir="${source-jdbc40-combined}"  preservelastmodified="yes"> 
	         <fileset dir="${source-jdbc40}"/>  
	   </copy>

	    <!-- jdbc 4.0 driver manifest -->
	    <copy tofile="${build}/build/META-INF/services/java.sql.Driver" 
	          overwrite="yes"  
	          preservelastmodified="yes"
	          file="${build}/build/java.sql.Driver" />

	    
	  </target>


	
	


<!--///////////////////////////////////////////////////////////////////////////
    // Target: usage
    ///////////////////////////////////////////////////////////////////////////-->
  <target name="usage">
    <echo>
Available Ant targets for the JTOpen build script include:

  all
  
  clean, clean-dist, clean-javadoc, clean-output
  
  clean-source
  
  compile
  
  compile-micro

  copyright
  
  init
  
  jar, jar-jt400, jar-jt400Micro, jar-jt400Native, jar-jt400Proxy, jar-jt400Servlet
  
  javadoc, checkJavadocIncludes
  
  micro, micro-preverify
  
  pcml
  
  source
  
  usage
  
  zip, zip-javadoc, zip-source
    </echo>
  </target>



<!--///////////////////////////////////////////////////////////////////////////
    // Target: zip
    ///////////////////////////////////////////////////////////////////////////-->
  <target name="zip" depends="zip-source,zip-javadoc"/>
  
  <target name="zip-javadoc">  
    <zip zipfile="${dist}/doc.zip" update="false">
      <zipfileset dir="${javadoc}"/>
      <zipfileset dir="${build}" includes="license.html"/>
    </zip>
    <checksum file="${dist}/doc.zip"/>
  </target>
  
  <target name="zip-source">
    <zip zipfile="${dist}/src.zip" update="false">
      <zipfileset dir="${source}"  excludes=".project"/>
      <zipfileset dir="${source-contrib}"  excludes=".project"/>
      <zipfileset dir="${source-micro}"  excludes=".project"/>
      <zipfileset dir="${include}" excludes="**/*.zip,**/*.jar,.project"/>
      <zipfileset dir="${build}/build" excludes="**/mypasswd"/>
      <zipfileset dir="${build}" includes="license.html"/>
      <zipfileset dir="${build}" includes="readme.html"/>
      <zipfileset dir="${build}" includes="changes.html"/>
    </zip>
    <checksum file="${dist}/src.zip"/>
  </target>  

	<!--///////////////////////////////////////////////////////////////////////////
	    // Target: ftpv7r2
	    // 
	    // Note:  depends="no" set because the dependency checking takes a 
	    //        null pointer exception in some circumstances.
	    ///////////////////////////////////////////////////////////////////////////-->
	  <target name="ftpv7r2" depends="jar">
	  	<!-- V7R2 server --> 
		  <ftp server="${v7r2server}"
		       remotedir="/QIBM/proddata/OS400/jt400/lib/"
		       userid="${userid}"
		       password="${password}"
		       passive="yes"
		       depends="no"
		  	   verbose="yes"
		       binary="yes">
		    <fileset dir="${dist}">
		      <include name="jt400.jar"/>
		      <include name="jt400Native.jar"/>
		    </fileset>
		  </ftp>

		  <ftp server="${v7r2server}"
		       remotedir="/QIBM/proddata/OS400/jt400/lib/java6"
		       userid="${userid}"
		       password="${password}"
		       passive="yes"
		       depends="no"
		  	   verbose="yes"
		       binary="yes">
		    <fileset dir="${dist6}">
		      <include name="jt400.jar"/>
		    </fileset>
		  </ftp>
     </target>

	
	<!--///////////////////////////////////////////////////////////////////////////
	    // Target: ftpvlinux
	    // 
	    // Note:  depends="no" set because the dependency checking takes a 
	    //        null pointer exception in some circumstances.
	    ///////////////////////////////////////////////////////////////////////////-->
	  <target name="ftplinux" depends="jar">
	  	<!-- V7R1 server --> 
		  <sftp server="${linuxserver}"
		       remotedir="/QIBM/proddata/OS400/jt400/lib/"
		       userid="${linuxuserid}"
		       password="${linuxpassword}"
		       passive="yes"
		       depends="no"
		  	   verbose="yes"
		       binary="yes">
		    <fileset dir="${dist}">
		      <include name="jt400.jar"/>
		      <include name="jt400Native.jar"/>
		    </fileset>
		  </sftp>

		  <sftp server="${linuxserver}"
		       remotedir="/QIBM/proddata/OS400/jt400/lib/java6"
		       userid="${linuxuserid}"
		       password="${linuxpassword}"
		       passive="yes"
		       depends="no"
		  	   verbose="yes"
		       binary="yes">
		    <fileset dir="${dist6}">
		      <include name="jt400.jar"/>
		    </fileset>
		  </sftp>
     </target>


	
	<!--///////////////////////////////////////////////////////////////////////////
	    // Target: ftpv7r1
	    // 
	    // Note:  depends="no" set because the dependency checking takes a 
	    //        null pointer exception in some circumstances.
	    ///////////////////////////////////////////////////////////////////////////-->
	  <target name="ftpv7r1" depends="jar">
	  	<!-- V7R1 server --> 
		  <ftp server="${v7r1server}"
		       remotedir="/QIBM/proddata/OS400/jt400/lib/"
		       userid="${userid}"
		       password="${password}"
		       passive="yes"
		       depends="no"
		  	   verbose="yes"
		       binary="yes">
		    <fileset dir="${dist}">
		      <include name="jt400.jar"/>
		      <include name="jt400Native.jar"/>
		    </fileset>
		  </ftp>

		  <ftp server="${v7r1server}"
		       remotedir="/QIBM/proddata/OS400/jt400/lib/java6"
		       userid="${userid}"
		       password="${password}"
		       passive="yes"
		       depends="no"
		  	   verbose="yes"
		       binary="yes">
		    <fileset dir="${dist6}">
		      <include name="jt400.jar"/>
		    </fileset>
		  </ftp>
     </target>

	<!--///////////////////////////////////////////////////////////////////////////
	    // Target: ftpv6r1
	    // 
	    // Note:  depends="no" set because the dependency checking takes a 
	    //        null pointer exception in some circumstances.
	    ///////////////////////////////////////////////////////////////////////////-->
	  <target name="ftpv6r1" depends="jar">
	  	<!-- V6R1 server --> 
		  <ftp server="${v6r1server1}"
		       remotedir="/QIBM/proddata/OS400/jt400/lib/"
		       userid="${userid}"
		       password="${password}"
		       passive="yes"
		       depends="no"
		  	   verbose="yes"
		       binary="yes">
		    <fileset dir="${dist}">
		      <include name="jt400.jar"/>
		      <include name="jt400Native.jar"/>
		    </fileset>
		  </ftp>

		  <ftp server="${v6r1server1}"
		       remotedir="/QIBM/proddata/OS400/jt400/lib/java6"
		       userid="${userid}"
		       password="${password}"
		       passive="yes"
		       depends="no"
		  	   verbose="yes"
		       binary="yes">
		    <fileset dir="${dist6}">
		      <include name="jt400.jar"/>
		    </fileset>
		  </ftp>
		  <ftp server="${v6r1server2}"
		       remotedir="/QIBM/proddata/OS400/jt400/lib/"
		       userid="${userid}"
		       password="${password}"
		       passive="yes"
		       depends="no"
		  	   verbose="yes"
		       binary="yes">
		    <fileset dir="${dist}">
		      <include name="jt400.jar"/>
		      <include name="jt400Native.jar"/>
		    </fileset>
		  </ftp>

		  <ftp server="${v6r1server2}"
		       remotedir="/QIBM/proddata/OS400/jt400/lib/java6"
		       userid="${userid}"
		       password="${password}"
		       passive="yes"
		       depends="no"
		  	   verbose="yes"
		       binary="yes">
		    <fileset dir="${dist6}">
		      <include name="jt400.jar"/>
		    </fileset>
		  </ftp>
     </target>

	
	<!--///////////////////////////////////////////////////////////////////////////
	    // Target: ftpv5r4
	    // 
	    // Note:  depends="no" set because the dependency checking takes a 
	    //        null pointer exception in some circumstances.
	    ///////////////////////////////////////////////////////////////////////////-->
	  <target name="ftpv5r4" depends="jar">
		  <ftp server="${v5r4server}"
		       remotedir="/QIBM/ProdData/HTTP/Public/jt400/lib"
		       userid="${userid}"
		       password="${password}"
		       passive="yes"
		       depends="no"
		  	   verbose="yes"
		       binary="yes">
		    <fileset dir="${dist}">
		      <include name="jt400.jar"/>
		      <include name="jt400Native.jar"/>
		      <include name="jt400Servlet.jar"/>
		    </fileset>
		  </ftp>

		  <ftp server="${v5r4server}"
		       remotedir="/QIBM/proddata/OS400/jt400/lib/java6"
		       userid="${userid}"
		       password="${password}"
		       passive="yes"
		       depends="no"
		  	   verbose="yes"
		       binary="yes">
		    <fileset dir="${dist6}">
		      <include name="jt400.jar"/>
		    </fileset>
		  </ftp>
	  	

     </target>



	<!--///////////////////////////////////////////////////////////////////////////
	    // Target: ftp
	    // 
	    // Note:  depends="no" set because the dependency checking takes a 
	    //        null pointer exception in some circumstances.
	    ///////////////////////////////////////////////////////////////////////////-->
	  <target name="ftp" depends="jar">
	  	<!-- V7R1 server --> 
		  <ftp server="${v7r1server}"
		       remotedir="/QIBM/proddata/OS400/jt400/lib/"
		       userid="${userid}"
		       password="${password}"
		       passive="yes"
		       depends="no"
		  	   verbose="yes"
		       binary="yes">
		    <fileset dir="${dist}">
		      <include name="jt400.jar"/>
		      <include name="jt400Native.jar"/>
		    </fileset>
		  </ftp>

		  <ftp server="${v7r1server}"
		       remotedir="/QIBM/proddata/OS400/jt400/lib/java6"
		       userid="${userid}"
		       password="${password}"
		       passive="yes"
		       depends="no"
		  	   verbose="yes"
		       binary="yes">
		    <fileset dir="${dist6}">
		      <include name="jt400.jar"/>
		    </fileset>
		  </ftp>


		  <ftp server="${v6r1server1}"
		       remotedir="/QIBM/ProdData/HTTP/Public/jt400/lib"
		       userid="${userid}"
		       password="${password}"
		       passive="yes"
		       depends="no"
		  	   verbose="yes"
		       binary="yes">
		    <fileset dir="${dist}">
		      <include name="jt400.jar"/>
		      <include name="jt400Native.jar"/>
		    </fileset>
		  </ftp>

		  <ftp server="${v6r1server1}"
		       remotedir="/QIBM/proddata/OS400/jt400/lib/java6"
		       userid="${userid}"
		       password="${password}"
		       passive="yes"
		       depends="no"
		  	   verbose="yes"
		       binary="yes">
		    <fileset dir="${dist6}">
		      <include name="jt400.jar"/>
		    </fileset>
		  </ftp>
	  	
		  <ftp server="${v6r1server2}"
		       remotedir="/QIBM/ProdData/HTTP/Public/jt400/lib"
		       userid="${userid}"
		       password="${password}"
		       passive="yes"
		       depends="no"
		  	   verbose="yes"
		       binary="yes">
		    <fileset dir="${dist}">
		      <include name="jt400.jar"/>
		      <include name="jt400Native.jar"/>
		    </fileset>
		  </ftp>

		  <ftp server="${v6r1server2}"
		       remotedir="/QIBM/proddata/OS400/jt400/lib/java6"
		       userid="${userid}"
		       password="${password}"
		       passive="yes"
		       depends="no"
		  	   verbose="yes"
		       binary="yes">
		    <fileset dir="${dist6}">
		      <include name="jt400.jar"/>
		    </fileset>
		  </ftp>
	  	
		  <ftp server="${v5r4server}"
		       remotedir="/QIBM/ProdData/HTTP/Public/jt400/lib"
		       userid="${userid}"
		       password="${password}"
		       passive="yes"
		       depends="no"
		  	   verbose="yes"
		       binary="yes">
		    <fileset dir="${dist}">
		      <include name="jt400.jar"/>
		      <include name="jt400Native.jar"/>
		    </fileset>
		  </ftp>

		  <ftp server="${v5r4server}"
		       remotedir="/QIBM/proddata/OS400/jt400/lib/java6"
		       userid="${userid}"
		       password="${password}"
		       passive="yes"
		       depends="no"
		  	   verbose="yes"
		       binary="yes">
		    <fileset dir="${dist6}">
		      <include name="jt400.jar"/>
		    </fileset>
		  </ftp>
	  	
	  	
	  	
	  	
	  </target>  
		


</project>
