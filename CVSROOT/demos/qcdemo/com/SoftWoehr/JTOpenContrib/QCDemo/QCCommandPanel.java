/*
 * QCCommandPanel.java
 *
 * Created on July 12, 2000, 11:19 AM
 *
 * This is free open source software distributed under the IBM Public License found
 * on the World Wide Web at http://oss.software.ibm.com/developerworks/opensource/license10.html
 * Copyright *C* 2000, Jack J. Woehr, PO Box 51, Golden, CO 80402-0051 USA jax@well.com
 * Copyright *C* 2000, International Business Machines Corporation and others. All Rights Reserved.
 */

package com.SoftWoehr.JTOpenContrib.QCDemo;

/** A panel to add to a notebook that has a CommandCallButton.
 * @author jax
 * @version 1.0
 */
public class QCCommandPanel extends javax.swing.JPanel implements QCServiceClient {

  private QCMgr manager;
  private com.SoftWoehr.JTOpenContrib.QCDemo.QCServiceRecord serviceRecord;

  private com.ibm.as400.vaccess.ErrorDialogAdapter errorDialogAdapter;
  /** Creates new form QCCommandPanel */
  public QCCommandPanel() {
    initComponents ();
  }

  /** Create a QCCommandPanel on an instance of an AS400.
   * @param as400 An AS400 object
   */
  public QCCommandPanel(com.ibm.as400.access.AS400 as400) {
    this();
    setAS400(as400);
  }
  /** Create a command panel on a QCMgr.This method is not useful and is going away.
   * @param mgr A QCMgr
   */
  public QCCommandPanel(QCMgr mgr) {
    this();
    setManager(mgr);
  }
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the FormEditor.
   */
  private void initComponents () {//GEN-BEGIN:initComponents
    jTextArea1 = new javax.swing.JTextArea ();
    jPanel1 = new javax.swing.JPanel ();
    qCCommandButtonPanel1 = new com.SoftWoehr.JTOpenContrib.QCDemo.QCCommandButtonPanel ();
    commandTextField = new javax.swing.JTextField ();
    systemButton = new javax.swing.JButton ();
    systemNameTextField = new javax.swing.JTextField ();
    aS400DetailsPane1 = new com.ibm.as400.vaccess.AS400DetailsPane ();
    setLayout (new java.awt.BorderLayout ());

    jTextArea1.setEditable (false);


    add (jTextArea1, java.awt.BorderLayout.NORTH);

    jPanel1.setLayout (new java.awt.GridLayout (2, 2));


      jPanel1.add (qCCommandButtonPanel1);

      commandTextField.setPreferredSize (new java.awt.Dimension(4, 40));
      commandTextField.setToolTipText ("Type the command you wish to execute, then hit Enter. This sets the CommandButton to the command.");
      commandTextField.addActionListener (new java.awt.event.ActionListener () {
        public void actionPerformed (java.awt.event.ActionEvent evt) {
          commandTextFieldActionPerformed (evt);
        }
      }
      );

      jPanel1.add (commandTextField);

      systemButton.setToolTipText ("Sets the system to the one you typed in.");
      systemButton.setText ("Set System");
      systemButton.addActionListener (new java.awt.event.ActionListener () {
        public void actionPerformed (java.awt.event.ActionEvent evt) {
          systemButtonActionPerformed (evt);
        }
      }
      );

      jPanel1.add (systemButton);

      systemNameTextField.setToolTipText ("Type in the system name on which you wish to execute a command.");
      systemNameTextField.addActionListener (new java.awt.event.ActionListener () {
        public void actionPerformed (java.awt.event.ActionEvent evt) {
          systemNameTextFieldActionPerformed (evt);
        }
      }
      );

      jPanel1.add (systemNameTextField);


    add (jPanel1, java.awt.BorderLayout.SOUTH);



    add (aS400DetailsPane1, java.awt.BorderLayout.CENTER);

  }//GEN-END:initComponents

  // Hitting ENTER in the System textfield has the same effect as pressing the System button.
  private void systemNameTextFieldActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_systemNameTextFieldActionPerformed
    // Add your handling code here:
    if (null != serviceRecord) {
      try { // let go of the service from manager
        manager.freeService(serviceRecord);
      }
      catch (Exception e) {
        e.printStackTrace();
      }
      serviceRecord = null;
    }
    try {
      serviceRecord = manager.getService("qcmgr:" + systemNameTextField.getText() + "/COMMAND", this);
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    setAS400(serviceRecord.as400);
  }//GEN-LAST:event_systemNameTextFieldActionPerformed

  private void commandTextFieldActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commandTextFieldActionPerformed
    // Add your handling code here:
    try {
      getButton().setCommand(commandTextField.getText());
    }
    catch (java.beans.PropertyVetoException e1) {
      e1.printStackTrace ();
    }
    getButton().setText(commandTextField.getText());
  }//GEN-LAST:event_commandTextFieldActionPerformed

  // Hitting ENTER in the System textfield has the same effect as pressing the System button.
  private void systemButtonActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_systemButtonActionPerformed
    // Add your handling code here:
    if (null != serviceRecord) {
      try { // let go of the service from manager
        manager.freeService(serviceRecord);
      }
      catch (Exception e) {
        e.printStackTrace();
      }
      serviceRecord = null;
    }
    try {
      serviceRecord = manager.getService("qcmgr:" + systemNameTextField.getText() + "/COMMAND", this);
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    setAS400(serviceRecord.as400);

  }//GEN-LAST:event_systemButtonActionPerformed

  private void commandCallButtonActionCompleted (com.ibm.as400.access.ActionCompletedEvent evt) {//GEN-FIRST:event_commandCallButtonActionCompleted
    // Add your handling code here:
    jTextArea1.setText(jTextArea1.getText() + "Command completion notification received.\n");

    // Cast the source of the event to a
    // CommandCallButton.
    com.ibm.as400.vaccess.CommandCallButton sourceButton = (com.ibm.as400.vaccess.CommandCallButton) evt.getSource ();

    // Get the list of AS/400 messages
    // that the command generated.
    com.ibm.as400.access.AS400Message[] messageList = sourceButton.getMessageList ();
    com.ibm.as400.vaccess.VMessageList vMessageList = new com.ibm.as400.vaccess.VMessageList(messageList);
    try {
      aS400DetailsPane1.setRoot(vMessageList);
      aS400DetailsPane1.load();
    }
    catch (java.beans.PropertyVetoException e) {
      e.printStackTrace();
    }

    // Handle message list manually.
    /*
    for (int i = 0; i < messageList.length; i++) {
    jTextArea1.setText(jTextArea1.getText() + messageList[i].getText() + "\n");
    }
     */
  }//GEN-LAST:event_commandCallButtonActionCompleted


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JTextArea jTextArea1;
  private javax.swing.JPanel jPanel1;
  private com.SoftWoehr.JTOpenContrib.QCDemo.QCCommandButtonPanel qCCommandButtonPanel1;
  private javax.swing.JTextField commandTextField;
  private javax.swing.JButton systemButton;
  private javax.swing.JTextField systemNameTextField;
  private com.ibm.as400.vaccess.AS400DetailsPane aS400DetailsPane1;
  // End of variables declaration//GEN-END:variables

  /** Re-instances of the CommandCallButton in the QCButtonPanel. Button gets
   * reinstanced a lot because you can't effectively call setServer() more
   * than once on an instance.
   * @param as400 The AS400 object for the re-instanced CommandCallButton.
   */
  public void setAS400(com.ibm.as400.access.AS400 as400) {
    qCCommandButtonPanel1.renew(commandTextField.getText());
    attachCommandCompletedListener();
    getButton().addErrorListener(errorDialogAdapter);
    try {
      qCCommandButtonPanel1.getButton().setSystem(as400);
    }
    catch (java.beans.PropertyVetoException e1) {
      e1.printStackTrace ();
    }
    reinstanceCommandFromTextEntry(); // Set button label
  }

  /** Gets the command button's AS400 instance.
   * @return The AS400 object used by the command button.
   */
  public com.ibm.as400.access.AS400 getAS400() {
    return getButton().getSystem();
  }
  /** Resets the command button's text and command string
   * from user input.
   */
  public void reinstanceCommandFromTextEntry() {
    String text = commandTextField.getText();
    if (null != text) {
      if (!text.equals("")) {
        getButton().setText(commandTextField.getText());
        try {
          getButton().setCommand(commandTextField.getText());
        }
        catch (java.beans.PropertyVetoException e1) {
          e1.printStackTrace ();
        }
      }
      else {
        getButton().setText("Run a Command");
        try {
          getButton().setCommand("");
        }
        catch (java.beans.PropertyVetoException e1) {
          e1.printStackTrace ();
        }
      }
    }
    else {
      getButton().setText("Run a Command");
      try {
        getButton().setCommand("");
      }
      catch (java.beans.PropertyVetoException e1) {
        e1.printStackTrace ();
      }
    }
  }
  /** Sets the QCMgr object which will handle AS400 instances for this client.
   * @param mgr A QCMgr object.
   */
  public void setManager(QCMgr mgr) {
    manager = mgr;
  }
  /** Connects the ErrorDialogAdapter with any as400.vaccess components present.
   * @param eda An instance of an ErrorDialogAdapter already associated
   * with a suitable Frame.
   */
  public void propagateEDA(com.ibm.as400.vaccess.ErrorDialogAdapter eda) {
    errorDialogAdapter=eda;
    getButton().addErrorListener(eda);
    aS400DetailsPane1.addErrorListener(eda);
  }
  /** Required implementantion of the QCServiceClient interface. Releases the
   * AS400 object provided by the server.
   * @param sr The service record which represents the AS400 to be
   * relinquished.
   */
  public void relinquish(QCServiceRecord sr) {
    // setAS400(null); // Can't do this ... ah, well ...
    serviceRecord = null;
  }
  private void attachCommandCompletedListener() {
    getButton().addActionCompletedListener (new com.ibm.as400.access.ActionCompletedListener () {
      public void actionCompleted (com.ibm.as400.access.ActionCompletedEvent evt)
      {
        commandCallButtonActionCompleted(evt);
      }
    });
  }
  private com.ibm.as400.vaccess.CommandCallButton getButton() {
    return qCCommandButtonPanel1.getButton();
  }
}
